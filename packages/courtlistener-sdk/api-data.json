{
  "root": {
    "search": "https://www.courtlistener.com/api/rest/v4/search/?format=json",
    "dockets": "https://www.courtlistener.com/api/rest/v4/dockets/?format=json",
    "originating-court-information": "https://www.courtlistener.com/api/rest/v4/originating-court-information/?format=json",
    "docket-entries": "https://www.courtlistener.com/api/rest/v4/docket-entries/?format=json",
    "recap-documents": "https://www.courtlistener.com/api/rest/v4/recap-documents/?format=json",
    "courts": "https://www.courtlistener.com/api/rest/v4/courts/?format=json",
    "audio": "https://www.courtlistener.com/api/rest/v4/audio/?format=json",
    "clusters": "https://www.courtlistener.com/api/rest/v4/clusters/?format=json",
    "opinions": "https://www.courtlistener.com/api/rest/v4/opinions/?format=json",
    "opinions-cited": "https://www.courtlistener.com/api/rest/v4/opinions-cited/?format=json",
    "tag": "https://www.courtlistener.com/api/rest/v4/tag/?format=json",
    "people": "https://www.courtlistener.com/api/rest/v4/people/?format=json",
    "disclosure-typeahead": "https://www.courtlistener.com/api/rest/v4/disclosure-typeahead/?format=json",
    "positions": "https://www.courtlistener.com/api/rest/v4/positions/?format=json",
    "retention-events": "https://www.courtlistener.com/api/rest/v4/retention-events/?format=json",
    "educations": "https://www.courtlistener.com/api/rest/v4/educations/?format=json",
    "schools": "https://www.courtlistener.com/api/rest/v4/schools/?format=json",
    "political-affiliations": "https://www.courtlistener.com/api/rest/v4/political-affiliations/?format=json",
    "sources": "https://www.courtlistener.com/api/rest/v4/sources/?format=json",
    "aba-ratings": "https://www.courtlistener.com/api/rest/v4/aba-ratings/?format=json",
    "parties": "https://www.courtlistener.com/api/rest/v4/parties/?format=json",
    "attorneys": "https://www.courtlistener.com/api/rest/v4/attorneys/?format=json",
    "recap": "https://www.courtlistener.com/api/rest/v4/recap/?format=json",
    "recap-email": "https://www.courtlistener.com/api/rest/v4/recap-email/?format=json",
    "recap-fetch": "https://www.courtlistener.com/api/rest/v4/recap-fetch/?format=json",
    "recap-query": "https://www.courtlistener.com/api/rest/v4/recap-query/?format=json",
    "fjc-integrated-database": "https://www.courtlistener.com/api/rest/v4/fjc-integrated-database/?format=json",
    "tags": "https://www.courtlistener.com/api/rest/v4/tags/?format=json",
    "docket-tags": "https://www.courtlistener.com/api/rest/v4/docket-tags/?format=json",
    "prayers": "https://www.courtlistener.com/api/rest/v4/prayers/?format=json",
    "visualizations/json": "https://www.courtlistener.com/api/rest/v4/visualizations/json/?format=json",
    "visualizations": "https://www.courtlistener.com/api/rest/v4/visualizations/?format=json",
    "agreements": "https://www.courtlistener.com/api/rest/v4/agreements/?format=json",
    "debts": "https://www.courtlistener.com/api/rest/v4/debts/?format=json",
    "financial-disclosures": "https://www.courtlistener.com/api/rest/v4/financial-disclosures/?format=json",
    "gifts": "https://www.courtlistener.com/api/rest/v4/gifts/?format=json",
    "investments": "https://www.courtlistener.com/api/rest/v4/investments/?format=json",
    "non-investment-incomes": "https://www.courtlistener.com/api/rest/v4/non-investment-incomes/?format=json",
    "disclosure-positions": "https://www.courtlistener.com/api/rest/v4/disclosure-positions/?format=json",
    "reimbursements": "https://www.courtlistener.com/api/rest/v4/reimbursements/?format=json",
    "spouse-incomes": "https://www.courtlistener.com/api/rest/v4/spouse-incomes/?format=json",
    "alerts": "https://www.courtlistener.com/api/rest/v4/alerts/?format=json",
    "docket-alerts": "https://www.courtlistener.com/api/rest/v4/docket-alerts/?format=json",
    "memberships": "https://www.courtlistener.com/api/rest/v4/memberships/?format=json",
    "citation-lookup": "https://www.courtlistener.com/api/rest/v4/citation-lookup/?format=json"
  },
  "search": {
    "detail": "Not found."
  },
  "dockets": {
    "detail": "Not found."
  },
  "originating-court-information": {
    "detail": "Not found."
  },
  "docket-entries": {
    "detail": "Not found."
  },
  "recap-documents": {
    "detail": "Not found."
  },
  "courts": {
    "detail": "Not found."
  },
  "audio": {
    "detail": "Not found."
  },
  "clusters": {
    "detail": "Not found."
  },
  "opinions": {
    "detail": "Not found."
  },
  "opinions-cited": {
    "detail": "Not found."
  },
  "tag": {
    "detail": "Not found."
  },
  "people": {
    "detail": "Not found."
  },
  "disclosure-typeahead": {
    "detail": "Not found."
  },
  "positions": {
    "detail": "Not found."
  },
  "retention-events": {
    "detail": "Not found."
  },
  "educations": {
    "detail": "Not found."
  },
  "schools": {
    "detail": "Not found."
  },
  "political-affiliations": {
    "detail": "Not found."
  },
  "sources": {
    "detail": "Not found."
  },
  "aba-ratings": {
    "detail": "Not found."
  },
  "parties": {
    "detail": "Not found."
  },
  "attorneys": {
    "detail": "Not found."
  },
  "recap": {
    "detail": "Not found."
  },
  "recap-email": {
    "detail": "Not found."
  },
  "recap-fetch": {
    "detail": "Not found."
  },
  "recap-query": {
    "detail": "Not found."
  },
  "fjc-integrated-database": {
    "detail": "Not found."
  },
  "tags": {
    "detail": "Not found."
  },
  "docket-tags": {
    "detail": "Not found."
  },
  "prayers": {
    "detail": "Not found."
  },
  "visualizations/json": {
    "detail": "Not found."
  },
  "visualizations": {
    "detail": "Not found."
  },
  "agreements": {
    "detail": "Not found."
  },
  "debts": {
    "detail": "Not found."
  },
  "financial-disclosures": {
    "detail": "Not found."
  },
  "gifts": {
    "detail": "Not found."
  },
  "investments": {
    "detail": "Not found."
  },
  "non-investment-incomes": {
    "detail": "Not found."
  },
  "disclosure-positions": {
    "detail": "Not found."
  },
  "reimbursements": {
    "detail": "Not found."
  },
  "spouse-incomes": {
    "detail": "Not found."
  },
  "alerts": {
    "detail": "Not found."
  },
  "docket-alerts": {
    "detail": "Not found."
  },
  "memberships": {
    "detail": "Not found."
  },
  "citation-lookup": {
    "detail": "Not found."
  },
  "docs_search_operators": "Operators\n\nAND - Intersection\n\nOR - Union\n\n- - Negation\n\n\" \" - Phrase search\n\n( ) - Grouped queries\n\n: - Fielded search\n\n*, ? - Wildcard\n\n~ - Fuzzy and proximity\n\n[x TO y] - Ranges\n\nAdvanced Query Techniques andÂ Operators\n\nCourtListener supports highly advanced Boolean queries. These allow you to build a complex search that can be run across our entire corpus.\n\nThese operators are all powered by the syntax of the Lucene search engine using the eDisMax query parser. More details about these operators use can be found on Lucene's help page.\n\nIf you would like assistance crafting a query, let us know. We can sometimes help.\n\nIntersections: AND or &\n\nThis connector is used by default, and so is not usually needed. However, some operators, like the negation operator, can change the default operator to OR. Therefore, in more complicated queries it is good practice to explicitly intersect your tokens by using the AND or & operator between all words e.g:\n\n(immigration AND asylum) AND (border OR patrol) or\n\n(immigration & asylum) & (border OR patrol)\n\nUnions: OR\n\nCreates an OR comparison between words (e.g. immigration OR asylum).\n\nNegation/Exclusion: -\n\nRequires that a word or phrase be excluded from the returned results. For example, this finds documents containing \"immigration\" but not \"border patrol\":\n\nimmigration -\"border patrol\"\n\nThis operator makes other tokens in your query fuzzy. Therefore, to do a boolean search, use the intersection operator (AND) between all your other tokens. For example, this searches for items containing both \"immigration\" and \"border,\" but not \"border patrol\":\n\nimmigration AND border AND -\"border patrol\"\n\nThis query does \"immigration\" or \"border\" but not \"border patrol\":\n\nimmigration border -\"border patrol\".\n\nBut not : NOT or %\n\nThe NOT operator or % serves as an alternative way to exclude terms from your search results. This operator is particularly useful when combined with other boolean operators or grouped queries to refine your search precision:\n\n\"border patrol\" NOT (immigration OR asylum) or\n\n\"border patrol\" % (immigration OR asylum)\n\nPhrase and Exact Queries: \" \"\n\nCreates a phrase search (e.g. \"border patrol\").\n\nYou can also use \" \" to perform an exact query, which will not apply stemming or match synonyms.\n\nFor instance: \"Inform\" people will return results containing only inform and people, thus avoiding results that include information. Conversely, \"Information\" people, will exclude results containing inform.\n\nIt's important to notice that a phrase query behaves as an exact query for each term within the phrase. Therefore, avoid nesting quotes, such as \"\"Inform\" people\" as all the quotes will be ignored.\n\nIn the case that quotation marks are not balanced (i.e. there is an odd number of them), they will be ignored.\n\nGrouped Queries and subqueries: ( )\n\nUsing parentheses will group parts of a query (e.g. (customs OR \"border patrol\") AND asylum). Parentheses can be nested as deeply as needed.\n\nWildcards and Fuzzy Search: *, !, ? and ~\n\nUsing an asterisk (*) allows for wildcard searches. For example, immigra* finds all words that begin with \"immigra\". Alternatively, you can use an exclamation mark (!) at the beginning of a word for the same purpose. For instance, !immigra matches words that start with \"immigra\".\n\n* can also be used inside words, where it acts as a single-character wildcard. For example, a query like gr*mm*r would match cases containing both \"grammar\" and \"grimmer\".\n\nThe question mark character (?) can be used similarly as a single-character wildcard. Unlike *, it is allowed at the beginning of words. For example, this would find cases containing the word \"immigrant\" or \"emmigration\": ?mmigra*.\n\nFuzzy search can be applied using the tilde character (~) after a word. This is an advanced parameter that allows searches for misspellings or variations in a word's spelling. For example, searching for immigrant~ would find words similar to \"immigrant.\" Values can also be added after the tilde to specify the maximum number of changes allowed, where a change refers to the insertion, deletion, substitution of a single character, or transposition of two adjacent characters. The default value, if none is given, is 2. Allowed values are 1 and 2. Fuzzy searches tend to broaden the result set, thus lowering precision, but also casting a wider net.\n\nDisallowed Wildcards\n\nThe following types of wildcard queries are disabled due to performance issues:\n\n* at the beginning of terms\n\nQueries like *ing are disallowed because they require examining all terms in the index, which is highly resource-intensive.\n\nMultiple endings with * or ! in short terms\n\nQueries that match multiple endings are only allowed if the base word has at least three characters. Therefore, queries like a*, bc*, !a, or !bc are disallowed due to performance issues.\n\nPerforming a query like these will throw an error with the message:\n\nThe query contains a disallowed wildcard pattern.\n\nProximity: ~\n\nUsing a tilde character (~) after a phrase will ensure that the words in the phrase are within a desired distance of each other. For example \"border fence\"~50 would find the words border and fence within 50 words of each other.\n\nRange Queries: [ ]\n\nRanges can be queried by using brackets. For example, a search for [1939 TO 1945] would find all cases that contained the numbers 1939 to 1945, inclusive. Range queries can also be fielded, allowing searches like citation:([22 TO 23] F2), which would find all cases from volumes 22 and 23 of the second series of the Federal Reporter. In range queries, the word 'TO' must be uppercase.\n\nDate Queries\n\nDate queries require the ISO-8601 standard date formatting. This means that dates must be formatted as follows:\n\nYYYY-MM-DD\n\nIn English that's year-month-day. For example, here's a date range that finds all docket filings from October 2018:\n\ndateFiled:[2018-10-01 TO 2018-10-31]\n\nFielded Queries: fieldname:term\n\nIn addition to being able to place fielded searches in the side bar, advanced users can also place fielded searches in their main query. For example, a search for court_id:ca1 status:precedential would return only precedential cases (status:precedential)in the First Circuit of Federal Appeals (court_id:ca1).\n\nParentheses can be used to create more complex queries. Or multi-terms queries. For example: casename:(wade OR roe) would find cases containing \"wade\" or \"roe\" in the name of the case. casename:(Roe v. Wade) would find cases containing all the terms provided, equivalent to \"Roe\" AND \"v.\" AND \"Wade\".\n\nDifferent search interfaces support different fields according to the following two tables:\n\nOPINIONS\nPARENTHETICALS\nRECAP\nORAL ARGUMENTS\nJUDGES\nField\tDescription\nid\tThe ID of the item in the CourtListener system.\ndocket_id\tThe ID of the docket that the item is associated with.\n\nscdb_id\tThe ID of an opinion in the Supreme Court Database.\ncluster_id\tA single case can have dissents, concurrences and other types of opinions. We call these 'clusters'. This is the ID of the cluster that an opinion is part of. See also: sibling_ids\nsibling_ids\tThe ID of other opinions within a cluster.\ncourt_id\tThis is the abbreviated court ID associated with the item. See the jurisdictions page for a current list of abbreviations. For judge search, see the court field for an alternate approach.\n\n\nattorney\tThe attorneys that argued the case.\n\n\nauthor_id\tThe ID of the judge that authored an opinion.\npanel_ids\tThe IDs of the judges on a panel for a case.\npanel_names\tThe full name of the judges on a panel for a case.\njoined_by_ids\tThe IDs of the judges joining an author in an opinion.\n\n\n\n\njudge\tA full-text searchable field containing the judge name, if known. This can be useful for judges that do not yet have an ID in our database.\nper_curiam\tWhether an opinion was written per curiam.\ndateFiled\tThe date the decision was issued by the court.\n\n\ndateArgued\tThe date that a case was first argued.\ndateReargued\tThe date that a case was reargued.\ndateReargumentDenied\tThe date a that a motion for reargument was denied.\n\ncaseName\tThe name of the case.\ndocketNumber\tThe docket number for a case.\ncitation\tAn all-encompassing field containing all of the citations for an opinion.\nneutralCite\tThe neutral citation for an opinion, if known.\nlexisCite\tThe citation for a case within LexisNexis's database.\nsuitNature\tThe nature of suit for a case.\nciteCount\tThe number of times an opinion has been cited. This field can accept range queries.\nstatus\tThe precedential status of a case. Valid entries for this field are published, unpublished, errata, separate, in-chambers, relating-to, unknown\ncites\tAll of the item IDs that cite an opinion.\n\n\n\n\n\n\n\n\n\ntype\tThe Opinion type. Valid entries for this field are combined-opinion, unanimous-opinion, lead-opinion, plurality-opinion, concurrence-opinion, in-part-opinion, dissent, addendum, remittitur, rehearing, on-the-merits, on-motion-to-strike.\nprocedural_history\tThe history of the case as it jumped from court to court.\nposture\tThe procedural posture of the case.\nsyllabus\tA summary of the issues presented in the case and the \"outcome.\"\nnon_participating_judge_ids\tThe judges that heard the case, but did not participate in the opinion\nsource\tThe source of the cluster. Valid entries for this field are:\nC for \"court website\",\nR for \"public.resource.org\",\nCR for \"court website merged with resource.org\",\nL for \"lawbox\",\nLC for \"lawbox merged with court\",\nLR for \"lawbox merged with resource.org\",\nLCR for \"lawbox merged with court and resource.org\",\nM for \"manual input\",\nA for \"internet archive\",\nH for \"brad heath archive\",\nZ for \"columbia archive\",\nU for \"Harvard, Library Innovation Lab Case Law Access Project\",\nCU for \"court website merged with Harvard\",\nD for \"direct court input\",\nQ for \"2020 anonymous database\",\nQU for \"2020 anonymous database merged with Harvard\",\nCRU for \"court website merged with public.resource.org and Harvard\",\nDU for \"direct court input merged with Harvard\",\nLU for \"lawbox merged with Harvard\",\nLCU for \"Lawbox merged with court website and Harvard\",\nLRU for \"Lawbox merged with public.resource.org and with Harvard\",\nLCRU for \"Lawbox merged with court website\",\nCRU for \"public.resource.org and Harvard\",\nMU for \"Manual input merged with Harvard\",\nRU for \"public.resource.org merged with Harvard\",\nZA for \"columbia merged with internet archive\",\nZD for \"columbia merged with direct court input\",\nZC for \"columbia merged with court\",\nZH for \"columbia merged with brad heath archive\",\nZLC for \"columbia merged with lawbox and court\",\nZLR for \"columbia merged with lawbox and resource.org\",\nZLCR for \"columbia merged with lawbox, court, and resource.org\",\nZR for \"columbia merged with resource.org\",\nZCR for \"columbia merged with court and resource.org\",\nZL for \"columbia merged with lawbox\",\nZM for \"columbia merged with manual input\",\nZQ for \"columbia merged with 2020 anonymous database\",\nZU for \"columbia archive merged with Harvard\",\nZLU for \"columbia archive merged with Lawbox and Harvard\",\nZDU for \"columbia archive merged with direct court input and Harvard\",\nZLRU for \"columbia archive merged with lawbox, public.resource.org and Harvard\",\nZLCRU for \"columbia archive merged with lawbox, court website, public.resource.org and Harvard\",\nZCU for \"columbia archive merged with court website and Harvard\",\nZMU for \"columbia archive merged with manual input and Harvard\",\nZRU for \"columbia archive merged with public.resource.org and Harvard\",\nZLCU for \"columbia archive merged with lawbox, court website and Harvard\"\n\n\n\n\n\n\n\nRelated opinions related:<id>\n\nFind opinions whose content is most related to the content of the given opinion. Replace <id> with the ID of the opinion for which you want to retrieve related opinions. The opinion ID can be found in the URL of the corresponding opinion: courtlistener.com/opinion/<id>/...\n\nAlternatively, you can navigate to the targeted opinion and click on View Full List in the Related Opinions section.",
  "docs_citation_lookup": " Back to API Docs \nTable of Contents\nOverview\nUsing the API\nField Definitions\nLimitations & Throttles\nAPI Examples\nBasic, Valid Lookup\nFailed Lookup\nThrottled Citations\nTypoed Reporter\nAmbiguous Citation\nCitation Lookup and VerificationÂ API\n/api/rest/v4/citation-lookup/\n\nUse this API to look up citations in CourtListener's database of 18,215,072 citations.\n\nThis API can look up either an individual citation or can parse and look up every citation in a block of text. This can be useful as a guardrail to help prevent hallucinated citations.\n\nThis API uses Eyecite, a tool we developed with Harvard Library Innovation Lab to parse legal citations. To develop Eyecite, we analyzed more than 50 million citations going back more than two centuries. We believe we have identified every reporter abbreviation in American case law and that there is no case law citation that Eyecite cannot properly parse and interpret.\n\nThis API uses the same authentication and serialization methods as the rest of the CourtListener APIs. It does not support filtering, pagination, ordering, or field selection.\n\nUsage\n\nThe simplest way to query this API is to send it a blob of text. If the text does not have any citations, it will simply return an empty JSON object:\n\ncurl -X POST \"https://www.courtlistener.com/api/rest/v4/citation-lookup/\" \\\n  --header 'Authorization: Token <your-token-here>' \\\n  --data 'text=Put some text here'\\\n[]\n\nIf the text contains valid citations, it will return a list of the citations, analyzing each. This example contains a single citation that is found:\n\ncurl -X POST \"https://www.courtlistener.com/api/rest/v4/citation-lookup/\" \\\n  --header 'Authorization: Token <your-token-here>' \\\n  --data 'text=Obergefell v. Hodges (576 U.S. 644) established the right to marriage among same-sex couples'\n[\n  {\n    \"citation\": \"576 U.S. 644\",\n    \"normalized_citations\": [\n      \"576 U.S. 644\"\n    ],\n    \"start_index\": 22,\n    \"end_index\": 34,\n    \"status\": 200,\n    \"error_message\": \"\",\n    \"clusters\": [...one large cluster object here...]\n  }\n]\n\nIf you have the volume, reporter, and page for a citation, you can look it up as follows:\n\ncurl -X POST \"https://www.courtlistener.com/api/rest/v4/citation-lookup/\" \\\n  --header 'Authorization: Token <your-token-here>' \\\n  --data 'volume=576' \\\n  --data 'reporter=U.S.' \\\n  --data 'page=644'\n\nThat returns the same response as above.\n\nField Definitions\n\nThe fields returned by this API are:\n\ncitation â The citation you looked up. If you supplied the volume, reporter, and page, they will appear here as a single space-separated string.\n\nnormalized_citations â Normalized versions of your citation if it contains a typo or if it is not the canonical (standard) abbreviation for a reporter. If the citation queried is ambiguous, more than one item can appear in this field. See examples below.\n\nstart_index & end_index â These fields indicate the start and end positions where a citation is found in the text queried.\n\nstatus â indicates the outcome of a citation lookup. Its values correspond to HTTP status codes and can have one of five values:\n\n200 (OK) â We found a citation, it was valid, and we were able to look it up in CourtListener.\n\n404 (Not Found) â We found a citation, it was valid, but we were unable to look it up in CourtListener.\n\n400 (Bad Request) â We found something that looks like a citation, but the reporter in the citation wasnât in our system (e.g., â33 Umbrella 422â looks like a citation, but is not valid).\n\n300 (Multiple Choices) â We found a valid citation, it was valid, but it matched more than one item in CourtListener.\n\n429 (Too Many Requests) â This API will only lookup 250 citations in a single request. Any citations after that point will have this status. They will be identified but will not be looked up. (See throttles below)\n\nerror_message â This field will contain additional details about any problems the lookup encounters.\n\nclusters â This is a list of the CourtListener cluster objects that match the citation in your query. This key will contain multiple values when a citation matches more than one legal decision. This can happen when a citation is ambiguous or when multiple decisions are on a single page in a printed book (and thus share the same citation).\n\nLimitations & Throttles\n\nThis API has four limitations on how much it can be used:\n\nThe performance of this API is affected by the number of citations it has to look up. Therefore, it is throttled to 60 valid citations per minute. If you are below this throttle, you will be able to send a request to the API. If a request pushes you beyond this throttle, further requests will be denied. When your request is denied, the API will respond with a 429 HTTP code and a JSON object. The JSON object will contain a wait_util key that uses an ISO-8601 datetime to indicate when you will be able to make your next request.\n\nThe API will look up at most 250 citations in any single request. Any citations past that point will be parsed, but not matched to the CourtListener database. The status key of such citations will be 429, indicating âToo many citations requested.â See examples below for details.\n\nText lookup requests to this API can only contain 64,000 characters at a time. Requests with more than this amount will be blocked for security. This is about 50 pages of legal content.\n\nTo prevent denial of service attacks that do not contain any citations, this API has the same request throttle rates as the other CourtListener APIs. This way, even requests that do not contain citations can be throttled. (Most users will never encounter this throttle.)\n\nA few other limitations to be aware of include:\n\nThis API does not look up statutes, law journals, id, or supra citations. If you wish to match such citations, please use Eyecite directly.\n\nThis API will not attempt to match citations without volume numbers or page numbers (e.g. 22 U.S. ___).\n\nAPI Examples\nBasic, Valid Lookup\n\nThe following is a basic lookup using the text parameter and a block of text:\n\ncurl -X POST \"https://www.courtlistener.com/api/rest/v4/citation-lookup/\" \\\n  --header 'Authorization: Token <your-token-here>' \\\n  --data 'text=Obergefell v. Hodges (576 U.S. 644) established the right to marriage among same-sex couples'\n[\n  {\n    \"citation\": \"576 U.S. 644\",\n    \"normalized_citations\": [\n      \"576 U.S. 644\"\n    ],\n    \"start_index\": 22,\n    \"end_index\": 34,\n    \"status\": 200,\n    \"error_message\": \"\",\n    \"clusters\": [...one cluster here...]\n  }\n]\nFailed Lookup\n\nThis query uses the volume-reporter-page triad, but fails because the citation does not exist:\n\ncurl -X POST \"https://www.courtlistener.com/api/rest/v4/citation-lookup/\" \\\n  --header 'Authorization: Token <your-token-here>' \\\n  --data 'volume=1' \\\n  --data 'reporter=U.S.' \\\n  --data 'page=200'\n[\n  {\n    \"citation\": \"1 U.S. 200\",\n    \"normalized_citations\": [\n      \"1 U.S. 200\"\n    ],\n    \"start_index\": 0,\n    \"end_index\": 10,\n    \"status\": 404,\n    \"error_message\": \"Citation not found: '1 U.S. 200'\",\n    \"clusters\": []\n  }\n]\n\nNote that:\n\nThe status field is set to 404 indicating the citation was not found.\n\nThe start_index is 0, and the end_index is the length of the citation including space separators.\n\nThe error_message field provides details of the error.\n\nThrottled Citations\n\nIf your request contains more than 250 citations, the 251st and subsequent citations will be returned with 429 status fields:\n\ncurl -X POST \"https://www.courtlistener.com/api/rest/v4/citation-lookup/\" \\\n  --header 'Authorization: Token <your-token-here>' \\\n  --data 'text=Imagine a very long blob here, with 251 citations.'\n[\n  ...250 citations would appear here, then the 251st and subsequent citations would be...\n  {\n    \"citation\": \"576 U.S. 644\",\n    \"normalized_citations\": [\n      \"576 U.S. 644\"\n    ],\n    \"start_index\": 10002,\n    \"end_index\": 10013,\n    \"status\": 429,\n    \"error_message\": \"Too many citations requested.\",\n    \"clusters\": []\n  }\n]\n\nNote that:\n\nAll citations will be parsed and will provide normalized versions and index locations.\n\nCitations after the 250th will return a status of 429, indicating \"Too many citations requested.\"\n\nA follow-up query that begins on the 251st start_index (in this case number 10002) will look up the next 250 items.\n\nTypoed/Non-Canonical Reporter Abbreviation\n\nIf you query the non-canonical reporter abbreviation or if your reporter contains a known typo, we will provide the corrected citation in the normalized_citations key. The following example looks up a citation using \"US\" instead of the correct \"U.S.\":\n\ncurl -X POST \"https://www.courtlistener.com/api/rest/v4/citation-lookup/\" \\\n  --header 'Authorization: Token <your-token-here>' \\\n  --data 'text=576 US 644'\n[\n  {\n    \"citation\": \"576 US 644\",\n    \"normalized_citations\": [\n      \"576 U.S. 644\"\n    ],\n    \"start_index\": 1,\n    \"end_index\": 11,\n    \"status\": 200,\n    \"error_message\": \"\",\n    \"clusters\": [...one cluster here...]\n  }\n]\nAmbiguous Citation\n\nThis lookup is for an ambiguous citation abbreviated as \"H.\" This reporter abbreviation can refer to Handy's Ohio Reports, the Hawaii Reports, or Hillâs New York Reports. Only two of those reporter series have cases at the queried volume and page number, so the API returns two possible matches for the citation:\n\ncurl -X POST \"https://www.courtlistener.com/api/rest/v4/citation-lookup/\" \\\n  --header 'Authorization: Token <your-token-here>' \\\n  --data 'text=1 H. 150'\n[\n  {\n    \"citation\": \"1 H. 150\",\n    \"normalized_citations\": [\n      \"1 Handy 150\",\n      \"1 Haw. 150\",\n      \"1 Hill 150\"\n    ],\n    \"start_index\": 0,\n    \"end_index\": 8,\n    \"status\": 300,\n    \"clusters\": [\n      {\n        ...\n        \"citations\": [{\n          \"volume\": 1,\n          \"reporter\": \"Handy\",\n          \"page\": \"150\",\n          \"type\": 2\n        }],\n       ...\n       \"case_name\": \"Louis v. Steamboat Buckeye\",\n       ...\n      },\n      {\n        ...\n        \"citations\": [{\n          \"volume\": 1,\n          \"reporter\": \"Haw.\",\n          \"page\": \"150\",\n          \"type\": 2\n        }],\n        ...\n        \"case_name\": \"Fell v. Parke\",\n        ...\n      }\n    ]\n  }\n]\n\nNote that:\n\nThe normalized_citations field returned three possible values for the ambiguous query.\n\nThe status field returned a 300 code, indicating \"Multiple Choices.\"\n\nThere are two different objects returned in the clusters field.\n\nPlease Support Open LegalÂ Data\n\nThese services are sponsored by Free Law Project and users like you. We provide these services in furtherance of our mission to make the legal sector more innovative and equitable.\n\nWe have provided these services for over a decade, and we need your contributions to continue curating and enhancing them.\n\nWill you support us today by becoming a member?\n\n Join FLP",
  "docs_search": " Back to API Docs \nTable of Contents\nOverview\nBasic Usage\nUnderstanding\nResult Types\nOrdering\nFiltering\nFields\nHighlighting\nResult Counts\nSpecial Notes\nMonitoring a Query\nLegal SearchÂ API\n/api/rest/v4/search/\n\nUse this API to search case law, PACER data, judges, and oral argument audio recordings.\n\nTo get the most out of this API, see our coverage and advanced operators documentation.\n\nBasic Usage\n\nThis API uses the same GET parameters as the front end of the website. To use this API, place a search query on the front end of the website. That will give you a URL like:\n\nhttps://www.courtlistener.com/q=foo\n\nTo make this into an API request, copy the GET parameters from this URL to the API endpoint, creating a request like:\n\ncurl -X GET \\\n  --header 'Authorization: Token <your-token-here>' \\\n  'https://www.courtlistener.com/api/rest/v4/search/?q=foo'\n\nThat returns:\n\n{\n  \"count\": 2343,\n    \"next\": \"https://www.courtlistener.com/api/rest/v4/search/?cursor=cz0yMzUuODcxMjUmcz04MDUzNTUzJnQ9byZkPTIwMjQtMDktMTY%3D&q=foo\",\n    \"previous\": null,\n    \"results\": [\n        {\n            \"absolute_url\": \"/opinion/6613686/foo-v-foo/\",\n            \"attorney\": \"\",\n            \"caseName\": \"Foo v. Foo\",\n            \"caseNameFull\": \"Foo v. Foo\",\n            \"citation\": [\n                \"101 Haw. 235\",\n                \"65 P.3d 182\"\n            ],\n            \"citeCount\": 0,\n            \"cluster_id\": 6613686,\n            \"court\": \"Hawaii Intermediate Court of Appeals\",\n            \"court_citation_string\": \"Haw. App.\",\n            \"court_id\": \"hawapp\",\n            \"dateArgued\": null,\n            \"dateFiled\": \"2003-01-10\",\n            \"dateReargued\": null,\n            \"dateReargumentDenied\": null,\n            \"docketNumber\": \"24158\",\n            \"docket_id\": 63544014,\n            \"judge\": \"\",\n            \"lexisCite\": \"\",\n            \"meta\": {\n                \"timestamp\": \"2024-06-22T10:26:35.320787Z\",\n                \"date_created\": \"2022-06-26T23:24:18.926040Z\",\n                \"score\": {\n                    \"bm25\": 2.1369965\n                }\n            },\n            \"neutralCite\": \"\",\n            \"non_participating_judge_ids\": [],\n            \"opinions\": [\n                {\n                    \"author_id\": null,\n                    \"cites\": [],\n                    \"download_url\": null,\n                    \"id\": 6489975,\n                    \"joined_by_ids\": [],\n                    \"local_path\": null,\n                    \"meta\": {\n                        \"timestamp\": \"2024-06-24T21:14:41.408206Z\",\n                        \"date_created\": \"2022-06-26T23:24:18.931912Z\"\n                    },\n                    \"per_curiam\": false,\n                    \"sha1\": \"\",\n                    \"snippet\": \"\\nAffirmed in part, reversed in part, vacated and remanded\\n\",\n                    \"type\": \"lead-opinion\"\n                }\n            ],\n            \"panel_ids\": [],\n            \"panel_names\": [],\n            \"posture\": \"\",\n            \"procedural_history\": \"\",\n            \"scdb_id\": \"\",\n            \"sibling_ids\": [\n                6489975\n            ],\n            \"source\": \"U\",\n            \"status\": \"Published\",\n            \"suitNature\": \"\",\n            \"syllabus\": \"\"\n        },\n    ...\n\nThat's the simple version. Read on to learn the rest.\n\nUnderstanding the API\n\nUnlike most APIs on CourtListener, this API is powered by our search engine, not our database.\n\nThis means that it does not use the same approach to ordering, filtering, or field definitions as our other APIs, and sending an HTTP OPTIONS request won't be useful.\n\nSetting the Result type\n\nThe most important parameter in this API is type. This parameter sets the type of object you are querying:\n\nType\tDefinition\no\tCase law opinion clusters with nested Opinion documents.\nr\tList of Federal cases (dockets) with up to three nested documents. If there are more than three matching documents, the more_docs field for the docket result will be true.\nrd\tFederal filing documents from PACER\nd\tFederal cases (dockets) from PACER\np\tJudges\noa\tOral argument audio files\n\nFor example, this query searches case law:\n\nhttps://www.courtlistener.com/q=foo&type=o\n\nAnd this query searches federal filings in the PACER system:\n\nhttps://www.courtlistener.com/q=foo&type=r\n\nIf the type parameter is not provided, the default is to search case law.\n\nOrdering Results\n\nEach search type can be sorted by certain fields. These are available on the front end in the ordering drop down, which sets the order_by parameter.\n\nIf your sorting field has null values, those results will be sorted at the end of the query, regardless of whether you sort in ascending or descending order. For example if you sort by a date that is null for an opinion, that opinion will go at the end of the result set.\n\nFiltering Results\n\nResults can be filtered with the input boxes provided on the front end or by advanced query operators provided to the q parameter.\n\nThe best way to refine your query is to do so on the front end, and then copy the GET parameters to the API.\n\nFields\n\nUnlike most of the fields on CourtListener, many fields on this API are provided in camelCase instead of snake_case. This is to make it easier for users to place queries like:\n\ncaseName:foo\n\nInstead of:\n\ncase_name:foo\n\nAll available fields are listed on the advanced operators help page.\n\nTo understand the meaning of a field, find the object in our regular APIs that it corresponds to, and send an HTTP OPTIONS request to the API.\n\nFor example, the docketNumber field in the search engine corresponds to the docket_number field in the docket API, so an HTTP OPTIONS request to that API returns its definition:\n\ncurl -X OPTIONS \\\n  --header 'Authorization: Token <your-token-here>' \\\n  \"https://www.courtlistener.com/api/rest/v4/dockets/\" \\\n  | jq '.actions.POST.docket_number'\n\nAfter filtering through jq, that returns:\n\n{\n  \"type\": \"string\",\n  \"required\": false,\n  \"read_only\": false,\n  \"label\": \"Docket number\",\n  \"help_text\": \"The docket numbers of a case, can be consolidated and quite long. In some instances they are too long to be indexed by postgres and we store the full docket in the correction field on the Opinion Cluster.\"\n}\nHighlighting Results\n\nTo enhance performance, results are not highlighted by default. To enable highlighting, include highlight=on in your request.\n\nWhen highlighting is disabled, the first 500 characters of snippet fields are returned for fields o, r, and rd.\n\nResult Counts\n\ntype=d and type=r use cardinality aggregation to compute the result count. This enhances performance, but has an error of Â±6% if results are over 2000. We recommend noting this in your interface by saying something like, \"About 10,000 results.\"\n\nSpecial Notes\n\nA few fields deserve special consideration:\n\nAs in the front end, when the type is set to return case law, only published results are returned by default. To include unpublished and other statuses, you need to explicitly request them.\n\nThe snippet field contains the same values as are found on the front end. This uses the HTML5 <mark> element to identify up to five matches in a document.\n\nThis field only responds to arguments provided to the q parameter. If the q parameter is not used, the snippet field will show the first 500 characters of the text field.\n\nThis field only displays Opinion text content.\n\nThe meta field in main documents contains the score field, which is currently a JSON object that includes the bm25 score used by Elasticsearch to rank results. Additional scores may be introduced in the future.\n\nMonitoring a Query for NewÂ Results\n\nTo monitor queries for new results, use the Alert API, which will send emails or webhook events when there are new results.\n\nPlease Support Open LegalÂ Data\n\nThese services are sponsored by Free Law Project and users like you. We provide these services in furtherance of our mission to make the legal sector more innovative and equitable.\n\nWe have provided these services for over a decade, and we need your contributions to continue curating and enhancing them.\n\nWill you support us today by becoming a member?\n\n Join FLP",
  "docs_case_law": " Back to API Docs \nTable of Contents\nOverview\nThe APIs\nDockets\nClusters\nOpinions\nCourts\nAPI Examples\nFiltering by Court\nFiltering by Docket No.\nMaking a Custom Corpus\nFinding by URL\nCase LawÂ API\n\nUse these APIs to access our huge and growing database of case law.\n\nTo learn more about this collection, including the cases it has and how we get new data each day, see our coverage page on the topic.\n\nThis data is organized into a number of objects. An overview of these objects is described in this section, and greater detail is provided for each, below.\n\nThe four most important objects in this data set are courts, dockets, clusters, and opinions. Together, these hold most of the information from a single case:\n\nCourt objects hold information about thousands of courts in this country, including their name, abbreviation, founding date, and more. Every docket is joined to a court to indicate where the case was filed.\n\nDocket objects hold metadata about the case like the date it was initiated or terminated, the docket number, and more. Every cluster is joined to a docket.\n\nCluster objects group together opinions when a panel hears a case and there is more than one decision, such as a dissent, concurrence, etc. Clusters are an abstraction we created. Every opinion is joined to a cluster.\n\nOpinion objects contain the text of the decision and the metadata related to the individual panel member that wrote it.\n\nPutting this all together, dockets are filed in particular courts and contain clusters of opinions.\n\nIf you are looking for a particular piece of metadata, you will find it at the lowest object from the list above where it would not be repeated in the database.\n\nFor example, you could make the docket number a field of the opinion object. This would be fine until you had more than one opinion in a cluster, or more than one cluster joined to a docket. When that happened, you would wind up repeating the docket number value in each opinion object. Instead, if you make it a field of the docket object, you only have to save it to one place: The docket that binds together the clusters and opinions.\n\nAnother example is the opinion text. You could make it a field of the cluster, say, but, again, that wouldn't work, since it wouldn't be clear which opinion the text was a part of in a case with a dissent, concurrence, and majority opinion.\n\nThere are two other objects in the case law database:\n\nCitation objects link together which opinion objects cite each other. For more information, see their help page.\n\nParenthetical objects are extracted from the opinion text when a decision explains a citation it relies on as authority. These are not yet available in an API, but are available as bulk data.\n\nThe APIs\nDockets â /api/rest/v4/dockets/\n\nDocket objects sit at the top of the object hierarchy. In our PACER database, dockets link together docket entries, parties, and attorneys.\n\nIn our case law database, dockets sit above Opinion Clusters. In our oral argument database, they sit above Audio objects.\n\nTo look up field descriptions or options for filtering, ordering, or rendering, complete an HTTP OPTIONS request:\n\ncurl -v \\\n  -X OPTIONS \\\n  --header 'Authorization: Token <your-token-here>' \\\n  \"https://www.courtlistener.com/api/rest/v4/dockets/\"\n\nTo look up a particular docket, use its ID:\n\ncurl -v \\\n  --header 'Authorization: Token <your-token-here>' \\\n  \"https://www.courtlistener.com/api/rest/v4/dockets/4214664/\"\n\nThe response you get will not list the docket entries, parties, or attorneys for the docket (doing so doesn't scale), but will have many other metadata fields:\n\n{\n  \"resource_uri\": \"https://www.courtlistener.com/api/rest/v4/dockets/4214664/\",\n  \"id\": 4214664,\n  \"court\": \"https://www.courtlistener.com/api/rest/v4/courts/dcd/\",\n  \"court_id\": \"dcd\",\n  \"original_court_info\": null,\n  \"idb_data\": null,\n  \"clusters\": [],\n  \"audio_files\": [],\n  \"assigned_to\": \"https://www.courtlistener.com/api/rest/v4/people/1124/\",\n  \"referred_to\": null,\n  \"absolute_url\": \"/docket/4214664/national-veterans-legal-services-program-v-united-states/\",\n  \"date_created\": \"2016-08-20T07:25:37.448945-07:00\",\n  \"date_modified\": \"2024-05-20T03:59:23.387426-07:00\",\n  \"source\": 9,\n  \"appeal_from_str\": \"\",\n  \"assigned_to_str\": \"Paul L. Friedman\",\n  \"referred_to_str\": \"\",\n  \"panel_str\": \"\",\n  \"date_last_index\": \"2024-05-20T03:59:23.387429-07:00\",\n  \"date_cert_granted\": null,\n  \"date_cert_denied\": null,\n  \"date_argued\": null,\n  \"date_reargued\": null,\n  \"date_reargument_denied\": null,\n  \"date_filed\": \"2016-04-21\",\n  \"date_terminated\": null,\n  \"date_last_filing\": \"2024-05-15\",\n  \"case_name_short\": \"\",\n  \"case_name\": \"NATIONAL VETERANS LEGAL SERVICES PROGRAM v. United States\",\n  \"case_name_full\": \"\",\n  \"slug\": \"national-veterans-legal-services-program-v-united-states\",\n  \"docket_number\": \"1:16-cv-00745\",\n  \"docket_number_core\": \"1600745\",\n  \"pacer_case_id\": \"178502\",\n  \"cause\": \"28:1346 Tort Claim\",\n  \"nature_of_suit\": \"Other Statutory Actions\",\n  \"jury_demand\": \"None\",\n  \"jurisdiction_type\": \"U.S. Government Defendant\",\n  \"appellate_fee_status\": \"\",\n  \"appellate_case_type_information\": \"\",\n  \"mdl_status\": \"\",\n  \"filepath_ia\": \"https://www.archive.org/download/gov.uscourts.dcd.178502/gov.uscourts.dcd.178502.docket.xml\",\n  \"filepath_ia_json\": \"https://archive.org/download/gov.uscourts.dcd.178502/gov.uscourts.dcd.178502.docket.json\",\n  \"ia_upload_failure_count\": null,\n  \"ia_needs_upload\": true,\n  \"ia_date_first_change\": \"2018-09-30T00:00:00-07:00\",\n  \"date_blocked\": null,\n  \"blocked\": false,\n  \"appeal_from\": null,\n  \"tags\": [\n    \"https://www.courtlistener.com/api/rest/v4/tag/1316/\"\n  ],\n  \"panel\": []\n}\n\nThe name of a docket can change in response to the outside world, but the names of clusters do not change. Therefore, we have case_name fields on both the docket and the cluster.\n\nFor example, a suit filed against the EPA administrator might be captioned Petroleum Co. v. Regan. That would go into the case name fields of the docket and any decisions that were issued. But if the administrator resigns before the case is resolved, the docket would get a new case name, Petroleum Co. v. New Administrator, while the case name fields on the clusters would not change.\n\nFor more information on case names, see the help article on this topic.\n\nClusters â /api/rest/v4/clusters/\n\nThis is a major API that provides the millions of Opinion Clusters that are available on CourtListener.\n\nAs with all other APIs, you can look up the field descriptions, filtering, ordering, and rendering options by making an OPTIONS request:\n\ncurl -v \\\n  -X OPTIONS \\\n  --header 'Authorization: Token <your-token-here>' \\\n  \"https://www.courtlistener.com/api/rest/v4/clusters/\"\n\nA few notes:\n\nThe id field of the cluster is used in case law URLs on CourtListener.\n\nThe sub_opinions field provides a list of the opinions that are linked to each cluster.\n\nThe citations field will contain a list of parallel citations for the cluster. See the citation API for details.\n\nThere are several fields with judge information, such as judges, panel, non_participating_judges, etc. Some of these fields contain strings and others are linked to records in our judge API. When we are able to normalize a judge's name into a record in the judge database, we do so. If not, we store their name in a string field for later normalization.\n\nOpinions â /api/rest/v4/opinions/\n\nThis API contains the text and other metadata about specific decisions.\n\nAs with all other APIs, you can look up the field descriptions, filtering, ordering, and rendering options by making an OPTIONS request:\n\ncurl -v \\\n  -X OPTIONS \\\n  --header 'Authorization: Token <your-token-here>' \\\n  \"https://www.courtlistener.com/api/rest/v4/opinions/\"\n\nA few notes:\n\nThe type field indicates whether the item is a concurrence, lead opinion, dissent, etc. The values provided for this field are proceeded by numbers so that if they are sorted, they will also be sorted from highest priority to lowest. The most common type of opinion is a \"Combined Opinion\" this is what we label any opinion that either cannot be identified as a specific type, or that contains more than one type.\n\nThe download_url field contains the original location where we scraped the decision. Many courts do not maintain Cool URIs, so this field is often unreliable.\n\nThe local_path field contains the path to the binary file for the decision, if we have one. To use it, see the help article on this topic.\n\nThe opinions_cited field has a list of other opinions cited by the one you are reviewing.\n\nThe ordering_key field indicates the order of opinions within a cluster. This field is only populated for opinions ingested from Harvard or Columbia sources.\n\nEach opinion has several text fields that will be populated depending on the cluster's source field. For example, scraped opinions tend not to have great text while those from the Harvard corpus do. The best way to get the text for an opinion is to choose the first populated fields from the list below (from best to worst):\n\nhtml_with_citations is generated by finding citations in the text of the other fields. All items should eventually have this field, though it can be empty initially or if our citation lookup utility fails. In general, this field is used to generate pages on CourtListener.\nhtml_columbia will be populated if we got the content from the Columbia collaboration.\nhtml_lawbox will be populated if we got the content from the Lawbox donation.\nxml_harvard will be populated if the source was Harvard's Caselaw Access Project. This field has a lot of data but is not always perfect due to being created by OCR instead of by humans.\nhtml_anon_2020 will be populated if we got the content from our anonymous source in 2020.\nhtml will be populated if we got the opinion from a court's website as a Word Perfect or HTML document, or if we got the opinion from Resource.org, which provided HTML documents.\nplain_text will be populated if we got the opinion from a court's website as a PDF or Microsoft Word document.\nCourts â /api/rest/v4/courts/\n\nThis API contains data about the courts we have in our database, and is joined into nearly every other API so that you can know where an event happened, a judge worked, etc.\n\nTo look up field descriptions or options for filtering, ordering, or rendering, complete an HTTP OPTIONS request.\n\nYou can generally cache this API. It does not change often.\n\nAPI Examples\nFiltering to Opinions in a Court\n\nOpinions are joined to clusters, which join to dockets, and finally to courts. Therefore, one way to get opinions in a specific court is to use a filter like cluster__docket__court=XYZ (note the use of double underscores):\n\ncurl -v \\\n  --header 'Authorization: Token <your-token-here>' \\\n  \"https://www.courtlistener.com/api/rest/v4/opinions/?cluster__docket__court=scotus\"\n\nThat returns:\n\n{\n  \"next\": \"https://www.courtlistener.com/api/rest/v4/opinions/?cluster__docket__court=scotus&cursor=cD0xMDUxNjI5NA%3D%3D\",\n  \"previous\": null,\n  \"results\": [\n      {\n          \"resource_uri\": \"https://www.courtlistener.com/api/rest/v4/opinions/9973155/\",\n          \"id\": 9973155,\n  ...\n\nSuch an approach is fine if all you want is the opinion object, but often you'll want the docket and the cluster too.\n\nIn that case, start by getting the dockets with a filter like court=XYZ, then use the IDs in those dockets to get clusters and opinions.\n\nFor example, this gets the dockets from SCOTUS:\n\ncurl -v \\\n  --header 'Authorization: Token <your-token-here>' \\\n  \"https://www.courtlistener.com/api/rest/v4/dockets/?court=scotus\"\n\nThe first result contains a clusters key like:\n\n\"clusters\": [\n    \"https://www.courtlistener.com/api/rest/v4/clusters/9502621/\"\n],\n\nSo we can simply get that URL:\n\ncurl -v \\\n  --header 'Authorization: Token <your-token-here>' \\\n  \"https://www.courtlistener.com/api/rest/v4/clusters/9502621/\"\n\nThat returns a cluster, which has the following keys:\n\n\"docket\": \"https://www.courtlistener.com/api/rest/v4/dockets/68533094/\",\n\"sub_opinions\": [\n    \"https://www.courtlistener.com/api/rest/v4/opinions/9969234/\"\n],\n\nFinally, GET the links in the sub_opinions field to have the complete object:\n\ncurl -v \\\n  --header 'Authorization: Token <your-token-here>' \\\n  \"https://www.courtlistener.com/api/rest/v4/opinions/9969234/\"\nFiltering by Docket Number\n\nIf you know a docket number, you can use it to look up a docket, cluster, or opinion:\n\nA docket by docket number:\n\ncurl -v \\\n  --header 'Authorization: Token <your-token-here>' \\\n  \"https://www.courtlistener.com/api/rest/v4/dockets/?docket_number=23A994\"\n\nA cluster by docket number:\n\ncurl -v \\\n  --header 'Authorization: Token <your-token-here>' \\\n  \"https://www.courtlistener.com/api/rest/v4/clusters/?docket__docket_number=23A994\"\n\nAn opinion by docket number:\n\ncurl -v \\\n  --header 'Authorization: Token <your-token-here>' \\\n  \"https://www.courtlistener.com/api/rest/v4/opinions/?cluster__docket__docket_number=23A994\"\n\nDocket numbers are not unique, so you'll want to add a court filter too:\n\nFor dockets, add: &court=scotus\nFor clusters, add: &docket__court=scotus\nFor opinions, add: &cluster__docket__court=scotus\n\nYou may also find the search API helpful, since it will do fuzzy docket searches.\n\nMaking a Custom Case Law Corpus\n\nA common need by empirical researchers is a collection of case law about a particular topic. To build such a corpus, use the search API to identify cases and use these APIs to download them.\n\nFinding a Case by URL\n\nIf you know the URL of a case, you can find it in the cluster API. For example, Obergefell v. Hodges has this URL, with cluster ID 2812209:\n\nhttps://www.courtlistener.com/opinion/2812209/obergefell-v-hodges/\n\nThis case can be found in the cluster API using that same ID:\n\ncurl -v \\\n  --header 'Authorization: Token <your-token-here>' \\\n  \"https://www.courtlistener.com/api/rest/v4/clusters/2812209/\"\n\nOpinion IDs do not reliably match cluster IDs.\n\nPlease Support Open LegalÂ Data\n\nThese services are sponsored by Free Law Project and users like you. We provide these services in furtherance of our mission to make the legal sector more innovative and equitable.\n\nWe have provided these services for over a decade, and we need your contributions to continue curating and enhancing them.\n\nWill you support us today by becoming a member?\n\n Join FLP",
  "docs_judges": " Back to API Docs \nTable of Contents\nOverview\nThe APIs\nJudges & Appointers\nPositions Held\nPolitical Affiliations\nEducational Histories\nABA Ratings\nRetention Events\nSources\nJudge and JusticeÂ API\n\nUse these APIs to query and analyze thousands of federal and state court judges.\n\nThis data set is person-centric. All data links back to a particular person.\n\nTo learn more about this data, see our page about it on Free.law.\n\nThe available APIs include:\n\nJudges and Appointers\nPositions Held\nPolitical Affiliations\nEducational Histories\nABA Ratings\nRetention Events\nSources\n\nOther types of data are linked to this API and have their own documentation, including:\n\nFinancial Disclosures\nPACER Filings\nCase Law\nOral Argument Audio\n\nIn life, people can serve various roles in the justice system. Therefore, this is not strictly a database of judges, but rather a database of people and the positions they hold.\n\nFor example, William Taft served as president, where he appointed justices, but he was also a Supreme Court justice himself. Therefore, he has a single \"person\" record in the API, he has one position record for his role as president, and another position record for his role as a justice.\n\nThere are a number of \"granularity\" fields for dates. These are used to indicate how granular a corresponding date is. For example, if we know the year somebody died but not the month or day, we would put 2010-01-01 as the date of death, and set the date of death granularity field to %Y.\n\nThis approach means that you can still â mostly â filter and sort by these date fields, but with an awareness that the data may be incomplete.\n\nThe APIs\nPeople (Judges and Appointers)\n/api/rest/v4/people/\n\nThis API contains the central \"person\" object. As explained above, people can be judges, appointers, or both.\n\nThis object holds the core metadata about the person, including their biographical data, positions held, educational history, ABA ratings, and political affiliations.\n\nA few notes:\n\nPosition objects can be quite large, so they are linked in the person object instead of nested within it.\n\nIf the is_alias_of field has a value, that means the record represents a nickname for the person referenced in the alias field. Alias records make it possible to find a judge by name, even if they sometimes go by Bob instead of Robert. In our database, this field is a self-join.\n\nIn general, you will only want to work with judges where this field is null, indicating a record that represents a person, not an alias to a person.\n\nThe race and gender fields are not self-reported and should therefore be considered best guesses. We have done our best to gather these fields from reputable sources, but have also supplied values ourselves when it felt appropriate to do so. Some values may be incorrect.\n\nTo create choices for race, we used the U.S. census and added MENA (it has since been added to the census).\n\nThe has_photo field indicates whether we have a photo for the judge in our database of judge portraits.\n\nThe ftm_* fields relate to state court judges, who raise money for elections. Use these fields to link judges to their IDs on Follow The Money, where you can gather and analyze the details.\n\nThese fields have not been updated in many years, but we can do so as a service.\n\nPositions\n/api/rest/v4/positions/\n\nUse this API to learn the positions held by a person, including their time as president, in private practice, as a judge, or in any number of other roles in society or the judiciary.\n\nTo look up field descriptions or options for filtering, ordering, or rendering, complete an HTTP OPTIONS request.\n\nTo filter to positions for a particular person:\n\ncurl -v \\\n  --header 'Authorization: Token <your-token-here>' \\\n  \"https://www.courtlistener.com/api/rest/v4/positions/?person=20\"\nPolitical Affiliations\n/api/rest/v4/political-affiliations/\n\nUse this API to learn the political affiliations of a person. Political affiliations are gathered from a number of sources such as ballots or appointments, and have start and end dates.\n\nTo look up field descriptions or options for filtering, ordering, or rendering, complete an HTTP OPTIONS request.\n\nEducations and Schools\n/api/rest/v4/educations/\n\nUse this API to learn about the educational history of a person, including which schools they went to, when, and what degrees they received. Each education object can include a school object based on data from the Department of Education.\n\nTo look up field descriptions or options for filtering, ordering, or rendering, complete an HTTP OPTIONS request.\n\nTo filter for judges educated at a particular school:\n\ncurl -v \\\n  --header 'Authorization: Token <your-token-here>' \\\n  \"https://www.courtlistener.com/api/rest/v4/people/?educations__school__name__contains=Rochester\"\nABA Ratings\n/api/rest/v4/aba-ratings/\n\nThese are the American Bar Association ratings that are given to many judges, particularly those that are nominated to federal positions.\n\nTo look up field descriptions or options for filtering, ordering, or rendering, complete an HTTP OPTIONS request.\n\nRetention Events\n/api/rest/v4/retention-events/\n\nThese are the events that keep a judge in a position, such as a retention vote, or reappointment.\n\nTo look up field descriptions or options for filtering, ordering, or rendering, complete an HTTP OPTIONS request.\n\nSources\n/api/rest/v4/sources/\n\nThis API keeps a list of sources that explain how we built this database.\n\nTo look up field descriptions or options for filtering, ordering, or rendering, complete an HTTP OPTIONS request.\n\nPlease Support Open LegalÂ Data\n\nThese services are sponsored by Free Law Project and users like you. We provide these services in furtherance of our mission to make the legal sector more innovative and equitable.\n\nWe have provided these services for over a decade, and we need your contributions to continue curating and enhancing them.\n\nWill you support us today by becoming a member?\n\n Join FLP",
  "docs_financial_disclosures": " Back to API Docs \nTable of Contents\nOverview\nAvailable APIs\nDisclosures\nInvestments\nPositions\nAgreements\nNon-Investment Income\nSpousal Non-Investment Income\nReimbursements\nGifts\nDebts\nFields\nUnderstanding the Fields\nRedactions\nValue Codes\nInferred Values\nAPI Examples\nLearn More\nSecurity\nFinancial DisclosuresÂ API\n\nUse these APIs to work with financial disclosure records of current and former federal judges.\n\nThis data was collected from senate records and information requests we sent to the federal judiciary. You can learn more about which disclosures are included and the limitations of these APIs on our coverage page for financial disclosures.\n\nJudicial officers and certain judicial employees in the United States are required to file financial disclosure reports by Title I of the Ethics in Government Act of 1978. The Act requires that designated federal officials publicly disclose their personal financial interests to ensure confidence in the integrity of the federal government by demonstrating that they are able to carry out their duties without compromising the public trust.\n\nThese APIs were used by the Wall Street Journal in their 17-part exposÃ© about the hidden conflicts of federal judges. That led to Congress passing the Courthouse Ethics and Transparency Act to put this information online. It was also used by ProPublica in their Pulitzer prize winning reporting about failures to disclose gifts and perks.\n\nThis data is updated in partnership with organizations using it. Please get in touch if you would like to work together to process and ingest the latest disclosure records.\n\nAvailable APIs\n\nThe Ethics in Government Act details the types of information required, and prescribes the general format and procedures for the reports themselves.\n\nThe APIs described below mirror the Act's language, with APIs corresponding to each required disclosure type.\n\nDisclosures â /api/rest/v4/financial-disclosures/\n\nThis API contains information about the main document itself and is the link between the other financial disclosure endpoints and the judges in our system.\n\nInvestments â /api/rest/v4/investments/\n\nThis API lists the source and type of investment income held by a judge, including dividends, rents, interest, capital gains, or income from qualified or excepted trusts.\n\nPositions â /api/rest/v4/disclosure-positions/\n\nThis API lists the positions held as an officer, director, trustee, general partner, proprietor, representative, executor, employee, or consultant of any corporation, company, firm, partnership, trust, or other business enterprise, any nonprofit organization, any labor organization, or any educational or other institution other than the United States.\n\nAgreements â /api/rest/v4/agreements/\n\nThis API lists any agreements or arrangements of the filer in existence at any time during the reporting period.\n\nNon-Investment Income\n/api/rest/v4/non-investment-incomes/\n\nThis API lists the source, type, and the amount or value of earned or other non-investment income aggregating $200 or more from any one source that is received during the reporting period.\n\nNon-Investment Income (Spouse)\n/api/rest/v4/spouse-incomes/\n\nThis API lists the source and type earned of non-investment income from the spouse of the filer.\n\nReimbursements â /api/rest/v4/reimbursements/ \n\nThis API lists the source identity and description (including travel locations, dates, and nature of expenses provided) of any travel-related reimbursements aggregating more than $415 in value that are received by the filer from one source during the reporting period.\n\nGifts â /api/rest/v4/gifts/\n\nThis API lists the source, a brief description, and the value of all gifts aggregating more than $415 in value that are received by the filer during the reporting period from any one source.\n\nDebts â /api/rest/v4/debts/\n\nAll liabilities specified by that section that are owed during the period beginning on January 1 of the preceding calendar year and ending fewer than 31 days before the date on which the report is filed.\n\nFields\nUnderstanding the Fields\n\nLike most of our APIs, field definitions can be obtained by sending an HTTP OPTIONS request to any of the APIs. For example, this request, piped through jq, shows you the fields of the Gifts API:\n\ncurl -X OPTIONS \"https://www.courtlistener.com/api/rest/v4/gifts/\" \\\n    | jq '.actions.POST'\n\n{\n  \"resource_uri\": {\n    \"type\": \"field\",\n    \"required\": false,\n    \"read_only\": true,\n    \"label\": \"Resource uri\"\n  },\n  \"id\": {\n    \"type\": \"field\",\n    \"required\": false,\n    \"read_only\": true,\n    \"label\": \"Id\"\n  },\n  \"date_created\": {\n    \"type\": \"datetime\",\n    \"required\": false,\n    \"read_only\": true,\n    \"label\": \"Date created\",\n    \"help_text\": \"The moment when the item was created.\"\n  },\n  \"date_modified\": {\n    \"type\": \"datetime\",\n    \"required\": false,\n    \"read_only\": true,\n    \"label\": \"Date modified\",\n    \"help_text\": \"The last moment when the item was modified. A value in year 1750 indicates the value is unknown\"\n  },\n  \"source\": {\n    \"type\": \"string\",\n    \"required\": false,\n    \"read_only\": false,\n    \"label\": \"Source\",\n    \"help_text\": \"Source of the judicial gift. (ex. Alta Ski Area).\"\n  },\n  \"description\": {\n    \"type\": \"string\",\n    \"required\": false,\n    \"read_only\": false,\n    \"label\": \"Description\",\n    \"help_text\": \"Description of the gift (ex. Season Pass).\"\n  },\n  \"value\": {\n    \"type\": \"string\",\n    \"required\": false,\n    \"read_only\": false,\n    \"label\": \"Value\",\n    \"help_text\": \"Value of the judicial gift, (ex. $1,199.00)\"\n  },\n  \"redacted\": {\n    \"type\": \"boolean\",\n    \"required\": false,\n    \"read_only\": false,\n    \"label\": \"Redacted\",\n    \"help_text\": \"Does the gift row contain redaction(s)?\"\n  },\n  \"financial_disclosure\": {\n    \"type\": \"field\",\n    \"required\": true,\n    \"read_only\": false,\n    \"label\": \"Financial disclosure\",\n    \"help_text\": \"The financial disclosure associated with this gift.\"\n  }\n}\n\nNote that each field has the following attributes:\n\ntype: Indicating the object type for the field.\nrequired: Indicating whether the field can have null values. Note that string fields will be blank instead of null.\nread_only: Indicates whether the field can be updated by users (this does not apply to read-only APIs like the financial disclosure APIs).\nlabel: This is a human-readable form for the field's name.\nhelp_text: This explains the meaning of the field.\nRedactions\n\nFor security reasons, filers can redact information on their disclosure forms. When a line in a disclosure contains a redaction, we will attempt to set the redacted field on that row to True. This is your hint that you may want to investigate that row more carefully.\n\nThis field can be used as a filter. For example, here are all the investments with redacted information:\n\ncurl \"https://www.courtlistener.com/api/rest/v4/investments/?redacted=True\" \\\n  --header 'Authorization: Token <your-token-here>'\n{\n  \"next\": \"https://www.courtlistener.com/api/rest/v4/investments/?page=2&redacted=True&cursor=cD0xMjA5NjAyMg%3D%3D\",\n  \"previous\": null,\n  \"results\": [\n    {\n      \"resource_uri\": \"https://www.courtlistener.com/api/rest/v4/investments/5385644/\",\n      \"id\": 5385644,\n      \"date_created\": \"2023-04-17T11:03:22.404170-07:00\",\n      \"date_modified\": \"2023-04-17T11:03:22.404185-07:00\",\n      \"page_number\": 4,\n      \"description\": \"Common Stock\",\n      \"redacted\": true,\n      \"income_during_reporting_period_code\": \"G\",\n      \"income_during_reporting_period_type\": \"Dividend\",\n      \"gross_value_code\": \"P2\",\n      \"gross_value_method\": \"T\",\n      \"transaction_during_reporting_period\": \"\",\n      \"transaction_date_raw\": \"\",\n      \"transaction_date\": null,\n      \"transaction_value_code\": \"\",\n      \"transaction_gain_code\": \"\",\n      \"transaction_partner\": \"\",\n      \"has_inferred_values\": false,\n      \"financial_disclosure\": \"https://www.courtlistener.com/api/rest/v4/financial-disclosures/34187/\"\n    },\n...\nValue Codes\n\nSeveral APIs, including Investments, Debts,and Gifts use form-based value codes to indicate monetary ranges instead of exact values. For example, the letter \"J\" indicates a value of $1â15,000.\n\nPlace an OPTIONS request to these endpoints to learn the values of those fields or look in a PDF filing to see the key.\n\nRegrettably, these fields have not been updated by the judiciary in many years, so the highest value code only goes up to $50,000,000. For some judges, this may not be enough to accurately reflect their wealth.\n\nInferred Values\n\nInvestment objects contain the field has_inferred_values. This field indicates that we inferred information about an investment based on the layout of the data in the disclosure form.\n\nFor example, an investment could have been bought in Q1, while a dividend was paid out in Q2 before being sold in Q4. Often, after the first entry of the investment, later rows in the table are mostly blank. In this instance, we infer the values.\n\nThe table below gives a brief example where we would infer that the blank cell below the cell for AAPL also refers to AAPL:\n\nDescription\tDate\tType\nAAPL\t2020-01-01\tBought\nâ\t2020-02-01\tSold\n\nIn this (slightly contrived) example our database would have two rows in the Investment table. The first would be for the purchase of the AAPL stock, and the second would be for the sale of it.\n\nAPI Examples\n\nYou can query for investments by stock name, transaction dates and even gross values. For example, the following query is for financial disclosures with individual investments valued above $50,000,000.00. Note that this uses a value code as explained in the general notes above:\n\ncurl \"https://www.courtlistener.com/api/rest/v4/investments/?gross_value_code=P4&fields=investments\" \\\n  --header 'Authorization: Token <your-token-here>'\n\nAdditionally, you could pinpoint gifts of individual judges when combining the gift database with our judicial database. The following query returns all reported gifts by the late Ruth Bader Ginsburg (her ID is 1213):\n\ncurl \"https://www.courtlistener.com/api/rest/v4/financial-disclosures/?person=1213&fields=gifts\" \\\n  --header 'Authorization: Token <your-token-here>'\n\nIn 2024, we presented these APIs at the NICAR conference and created many more examples you can explore.\n\nLearn More\n\nThe following references may help you learn more about these forms:\n\nThe official policies guiding financial disclosures\nThe filing instructions given to judges and judicial employees\nA GAO report on disclosures\nThe Ethics in Government Act establishing disclosure rules\nSecurity\n\nPlease report any security or privacy concerns to security@free.law.\n\nPlease Support Open LegalÂ Data\n\nThese services are sponsored by Free Law Project and users like you. We provide these services in furtherance of our mission to make the legal sector more innovative and equitable.\n\nWe have provided these services for over a decade, and we need your contributions to continue curating and enhancing them.\n\nWill you support us today by becoming a member?\n\n Join FLP",
  "docs_oral_arguments": " Back to API Docs \nTable of Contents\nOverview\nThe APIs\nOral Arguments\nDockets\nOral Argument RecordingsÂ APIs\n\nUse these APIs to gather and analyze the largest collection of oral argument recordings on the Internet.\n\nThe APIs\nOral Argument Recordings â /api/rest/v4/audio/\n\nUse this API to gather data about oral argument recordings. This API is linked to the docket API (below), which contains data about each case. It is also linked to the judge API, which has information about the judges in the case.\n\nThe audio files we gather from court websites come in many formats. After we gather the files, we convert them into optimized MP3s that have a 22050Hz sample rate and 48k bitrate. After converting the files, we set the ID3 tags to better values that we scraped. Finally, we set the cover art for the MP3 to the seal of the court, and set the publisher album art to our logo.\n\nThe original audio files can be downloaded from the court using the download_url field. If you prefer to download our enhanced version, that location is in the local_path_mp3 field. To download the file, see our help article on this topic.\n\nThe duration field contains an estimated length of the audio file, in seconds. Because these MP3s are variable bitrate, this field is based on sampling the file and is not always accurate.\n\nAs with all other APIs, you can look up the field descriptions, filtering, ordering, and rendering options by making an OPTIONS request:\n\ncurl -v \\\n  -X OPTIONS \\\n  --header 'Authorization: Token <your-token-here>' \\\n  \"https://www.courtlistener.com/api/rest/v4/audio/\"\nDockets â /api/rest/v4/dockets/\n\nDocket objects sit at the top of the object hierarchy. In our PACER database, dockets link together docket entries, parties, and attorneys.\n\nIn our case law database, dockets sit above Opinion Clusters. In our oral argument database, they sit above Audio objects.\n\nTo look up field descriptions or options for filtering, ordering, or rendering, complete an HTTP OPTIONS request:\n\ncurl -v \\\n  -X OPTIONS \\\n  --header 'Authorization: Token <your-token-here>' \\\n  \"https://www.courtlistener.com/api/rest/v4/dockets/\"\n\nTo look up a particular docket, use its ID:\n\ncurl -v \\\n  --header 'Authorization: Token <your-token-here>' \\\n  \"https://www.courtlistener.com/api/rest/v4/dockets/4214664/\"\n\nThe response you get will not list the docket entries, parties, or attorneys for the docket (doing so doesn't scale), but will have many other metadata fields:\n\n{\n  \"resource_uri\": \"https://www.courtlistener.com/api/rest/v4/dockets/4214664/\",\n  \"id\": 4214664,\n  \"court\": \"https://www.courtlistener.com/api/rest/v4/courts/dcd/\",\n  \"court_id\": \"dcd\",\n  \"original_court_info\": null,\n  \"idb_data\": null,\n  \"clusters\": [],\n  \"audio_files\": [],\n  \"assigned_to\": \"https://www.courtlistener.com/api/rest/v4/people/1124/\",\n  \"referred_to\": null,\n  \"absolute_url\": \"/docket/4214664/national-veterans-legal-services-program-v-united-states/\",\n  \"date_created\": \"2016-08-20T07:25:37.448945-07:00\",\n  \"date_modified\": \"2024-05-20T03:59:23.387426-07:00\",\n  \"source\": 9,\n  \"appeal_from_str\": \"\",\n  \"assigned_to_str\": \"Paul L. Friedman\",\n  \"referred_to_str\": \"\",\n  \"panel_str\": \"\",\n  \"date_last_index\": \"2024-05-20T03:59:23.387429-07:00\",\n  \"date_cert_granted\": null,\n  \"date_cert_denied\": null,\n  \"date_argued\": null,\n  \"date_reargued\": null,\n  \"date_reargument_denied\": null,\n  \"date_filed\": \"2016-04-21\",\n  \"date_terminated\": null,\n  \"date_last_filing\": \"2024-05-15\",\n  \"case_name_short\": \"\",\n  \"case_name\": \"NATIONAL VETERANS LEGAL SERVICES PROGRAM v. United States\",\n  \"case_name_full\": \"\",\n  \"slug\": \"national-veterans-legal-services-program-v-united-states\",\n  \"docket_number\": \"1:16-cv-00745\",\n  \"docket_number_core\": \"1600745\",\n  \"pacer_case_id\": \"178502\",\n  \"cause\": \"28:1346 Tort Claim\",\n  \"nature_of_suit\": \"Other Statutory Actions\",\n  \"jury_demand\": \"None\",\n  \"jurisdiction_type\": \"U.S. Government Defendant\",\n  \"appellate_fee_status\": \"\",\n  \"appellate_case_type_information\": \"\",\n  \"mdl_status\": \"\",\n  \"filepath_ia\": \"https://www.archive.org/download/gov.uscourts.dcd.178502/gov.uscourts.dcd.178502.docket.xml\",\n  \"filepath_ia_json\": \"https://archive.org/download/gov.uscourts.dcd.178502/gov.uscourts.dcd.178502.docket.json\",\n  \"ia_upload_failure_count\": null,\n  \"ia_needs_upload\": true,\n  \"ia_date_first_change\": \"2018-09-30T00:00:00-07:00\",\n  \"date_blocked\": null,\n  \"blocked\": false,\n  \"appeal_from\": null,\n  \"tags\": [\n    \"https://www.courtlistener.com/api/rest/v4/tag/1316/\"\n  ],\n  \"panel\": []\n}\nPlease Support Open LegalÂ Data\n\nThese services are sponsored by Free Law Project and users like you. We provide these services in furtherance of our mission to make the legal sector more innovative and equitable.\n\nWe have provided these services for over a decade, and we need your contributions to continue curating and enhancing them.\n\nWill you support us today by becoming a member?\n\n Join FLP",
  "docs_pacer": " Back to API Docs \nTable of Contents\nOverview\nThe APIs\nDockets\nCourts\nDocket Entries\nDocuments\nParties\nAttorneys\nOriginating Court Info\nIntegrated Database\nFast Document Lookup\nPACER DataÂ APIs\n\nUse these APIs to access almost half a billion items we have in our collection of PACER data.\n\nTo learn more about what's in the collection and how we gather PACER data each day, see our coverage page on the topic.\n\nThis data is organized into a number of objects. An overview of these objects is described in this section, and greater detail is provided for each, below.\n\nIn any legal proceeding, there are roughly three things: Documents, people, and organizations. Documents are grouped together into docket entries, which are grouped together into dockets. People and organizations are examples of parties. Parties have attorneys who act on their behalf in particular ways, which we call the attorney's role in the case.\n\nEach of these relationships is interlinked and has metadata that describes it. Use these APIs to explore this data.\n\nDockets, Courts, Docket Entries, andÂ Documents\n\nA docket is a list of docket entries and some metadata. Each docket entry is a collection of documents that is uploaded to the court by a party or their attorney at a given time.\n\nThe endpoints described in this section explain these objects and how they can be accessed in our system.\n\nDockets â /api/rest/v4/dockets/\n\nDocket objects sit at the top of the object hierarchy. In our PACER database, dockets link together docket entries, parties, and attorneys.\n\nIn our case law database, dockets sit above Opinion Clusters. In our oral argument database, they sit above Audio objects.\n\nTo look up field descriptions or options for filtering, ordering, or rendering, complete an HTTP OPTIONS request:\n\ncurl -v \\\n  -X OPTIONS \\\n  --header 'Authorization: Token <your-token-here>' \\\n  \"https://www.courtlistener.com/api/rest/v4/dockets/\"\n\nTo look up a particular docket, use its ID:\n\ncurl -v \\\n  --header 'Authorization: Token <your-token-here>' \\\n  \"https://www.courtlistener.com/api/rest/v4/dockets/4214664/\"\n\nThe response you get will not list the docket entries, parties, or attorneys for the docket (doing so doesn't scale), but will have many other metadata fields:\n\n{\n  \"resource_uri\": \"https://www.courtlistener.com/api/rest/v4/dockets/4214664/\",\n  \"id\": 4214664,\n  \"court\": \"https://www.courtlistener.com/api/rest/v4/courts/dcd/\",\n  \"court_id\": \"dcd\",\n  \"original_court_info\": null,\n  \"idb_data\": null,\n  \"clusters\": [],\n  \"audio_files\": [],\n  \"assigned_to\": \"https://www.courtlistener.com/api/rest/v4/people/1124/\",\n  \"referred_to\": null,\n  \"absolute_url\": \"/docket/4214664/national-veterans-legal-services-program-v-united-states/\",\n  \"date_created\": \"2016-08-20T07:25:37.448945-07:00\",\n  \"date_modified\": \"2024-05-20T03:59:23.387426-07:00\",\n  \"source\": 9,\n  \"appeal_from_str\": \"\",\n  \"assigned_to_str\": \"Paul L. Friedman\",\n  \"referred_to_str\": \"\",\n  \"panel_str\": \"\",\n  \"date_last_index\": \"2024-05-20T03:59:23.387429-07:00\",\n  \"date_cert_granted\": null,\n  \"date_cert_denied\": null,\n  \"date_argued\": null,\n  \"date_reargued\": null,\n  \"date_reargument_denied\": null,\n  \"date_filed\": \"2016-04-21\",\n  \"date_terminated\": null,\n  \"date_last_filing\": \"2024-05-15\",\n  \"case_name_short\": \"\",\n  \"case_name\": \"NATIONAL VETERANS LEGAL SERVICES PROGRAM v. United States\",\n  \"case_name_full\": \"\",\n  \"slug\": \"national-veterans-legal-services-program-v-united-states\",\n  \"docket_number\": \"1:16-cv-00745\",\n  \"docket_number_core\": \"1600745\",\n  \"pacer_case_id\": \"178502\",\n  \"cause\": \"28:1346 Tort Claim\",\n  \"nature_of_suit\": \"Other Statutory Actions\",\n  \"jury_demand\": \"None\",\n  \"jurisdiction_type\": \"U.S. Government Defendant\",\n  \"appellate_fee_status\": \"\",\n  \"appellate_case_type_information\": \"\",\n  \"mdl_status\": \"\",\n  \"filepath_ia\": \"https://www.archive.org/download/gov.uscourts.dcd.178502/gov.uscourts.dcd.178502.docket.xml\",\n  \"filepath_ia_json\": \"https://archive.org/download/gov.uscourts.dcd.178502/gov.uscourts.dcd.178502.docket.json\",\n  \"ia_upload_failure_count\": null,\n  \"ia_needs_upload\": true,\n  \"ia_date_first_change\": \"2018-09-30T00:00:00-07:00\",\n  \"date_blocked\": null,\n  \"blocked\": false,\n  \"appeal_from\": null,\n  \"tags\": [\n    \"https://www.courtlistener.com/api/rest/v4/tag/1316/\"\n  ],\n  \"panel\": []\n}\n\nIdeally, docket entries, parties, and attorneys would be nested within the docket object you request, but this is not possible because some dockets have a vast number of these objects. Listing so many values in a single response from the server is impractical. To access docket entries, parties, or attorneys for a specific docket, use the docket entry, party, or attorney endpoints and filter by docket ID.\n\nThe court fields are references to our Court API, described below.\n\nCourts â /api/rest/v4/courts/\n\nThis API contains data about the courts we have in our database, and is joined into nearly every other API so that you can know where an event happened, a judge worked, etc.\n\nTo look up field descriptions or options for filtering, ordering, or rendering, complete an HTTP OPTIONS request.\n\nYou can generally cache this API. It does not change often.\n\nDocket Entries â /api/rest/v4/docket-entries/\n\nDocket Entry objects represent the rows on a PACER docket, and contain one or more nested documents. This follows the design on PACER, in which a single row on a docket represents a document with its associated attachments.\n\nTo look up field descriptions or options for filtering, ordering, or rendering, complete an HTTP OPTIONS request.\n\nTo filter to the docket entries for a particular docket use the docketfilter:\n\ncurl -v \\\n  --header 'Authorization: Token <your-token-here>' \\\n  \"https://www.courtlistener.com/api/rest/v4/docket-entries/?docket=4214664\"\n\nSuch a request will return up to 20 docket entries per page. Each docket entry returned can contain a number of nested documents in the recap_document key, including their full extracted text (see details in the next section below). As a result, this response can be quite large.\n\nYou can also order the results using specific fields. To order results, use the order_by query parameter. For example, to order docket entries by their filing date in ascending order:\n\ncurl -v \\\n  --header 'Authorization: Token <your-token-here>' \\\n  \"https://www.courtlistener.com/api/rest/v4/docket-entries/?order_by=date_filed\"\n\nTo order in descending order, prepend a - to the field name. For example, ?order_by=-date_filed will order by filing date in descending order.\n\nThe following fields can be used for ordering:\n\nid\ndate_created\ndate_modified\ndate_filed\nrecap_sequence_number\nentry_number\n\nTo order using multiple fields simultaneously, separate the field names with commas. For example, ?order_by=recap_sequence_number,entry_number will use the default website order for Docket Entries.\n\nA few field-level notes:\n\nField\tNotes\nentry_number\t\n\nIn district courts, this field is usually a number between zero and the low thousands (depending on the length of the case).\n\nSome appellate courts do not provide this number, in which case we use the internal PACER document ID to populate this field.\n\n\ndescription\tThis field contains the description of the docket entry, if we have it. A second, shorter description is also available on the document itself.\nrecap_documents\tThis field contains all the documents associated with the docket entry. In general, this is only one or two items, but it can be more in complex litigation. See below for details.\nrecap_sequence_number\npacer_sequence_number\tUse the RECAP sequence number to sort dockets in your system. It is based on the PACER sequence number when we have it, plus some heuristics to order content as accurately as possible. In rare cases, docket entry numbers are not sequential, and these fields are preferred.\n\nThis endpoint is only available to select users. Please get in touch to access this API.\n\nDocuments â /api/rest/v4/recap-documents/\n\nEach docket entry contains several documents, which we call RECAP Document objects.\n\nTo look up field descriptions or options for filtering, ordering, or rendering, complete an HTTP OPTIONS request.\n\nA few field-level notes:\n\nField\tNotes\nplain_text\t\n\nThis field contains the extracted text of the document.\n\nWe use Doctor to complete this task. If needed, Doctor uses an optimized version of Tesseract to complete OCR.\n\nTo see whether OCR was used, check the ocr_status field.\n\n\nfilepath_local\t\n\nThis field contains the path to the binary file if we have it (is_available=True). To use this field, see the help article on this topic.\n\nThe name of this field dates back to when all our files were locally stored on a single server.\n\nThis endpoint is only available to select users. Please get in touch to access this API.\n\nParties â /api/rest/v4/parties/\n\nThe Party endpoint provides details about parties that have been involved in federal cases in PACER, and contains nested attorney information.\n\nTo look up field descriptions or options for filtering, ordering, or rendering, complete an HTTP OPTIONS request.\n\nThis API can be filtered by docket ID to show all the parties for a particular case.\n\n Listen Up: Filters applied to this endpoint only affect the top-level data, not the data nested records within it. Therefore, each party returned by this API will list all the attorneys that have represented them in any case, even if the parties themselves are filtered to a particular case.\n\nTo filter the nested attorney data for each party, include the filter_nested_results=True parameter in your API request.\n\nFor example, this query returns the parties for docket number 123:\n\ncurl -v \\\n  --header 'Authorization: Token <your-token-here>' \\\n  \"https://www.courtlistener.com/api/rest/v4/parties/?docket=123\"\n\nIt returns something like:\n\n{\nâ  \"next\": \"https://www.courtlistener.com/api/rest/v4/parties/?docket=123&cursor=cD0xMjA5NjAyMg%3D%3D&docket=4214664\",\",\n  \"previous\": null,\n  \"results\": [\n    {\n      \"resource_uri\": \"https://www.courtlistener.com/api/rest/v4/parties/42/\",\n      \"id\": 42,\nâ¡    \"attorneys\": [\n        {\n          \"attorney\": \"https://www.courtlistener.com/api/rest/v4/attorneys/1/\",\n          \"attorney_id\": 1,\n          \"date_action\": null,\n          \"docket\": \"https://www.courtlistener.com/api/rest/v4/dockets/123/\",\n          \"docket_id\": 123,\n          \"role\": 10\n        },\n        {\n          \"attorney\": \"https://www.courtlistener.com/api/rest/v4/attorneys/2/\",\n          \"attorney_id\": 2,\n          \"date_action\": null,\n          \"docket\": \"https://www.courtlistener.com/api/rest/v4/dockets/456/\",\n          \"docket_id\": 456,\n          \"role\": 2\n        }\n      ],\nâ¢    \"party_types\": [\n        {\n          \"docket\": \"https://www.courtlistener.com/api/rest/v4/dockets/123/\",\n          \"docket_id\": 123,\n          \"name\": \"Plaintiff\",\n          \"date_terminated\": null,\n          \"extra_info\": \"\",\nâ£         \"highest_offense_level_opening\": \"\",\n          \"highest_offense_level_terminated\": \"\",\n          \"criminal_counts\": [],\n          \"criminal_complaints\": []\n        }\n      ],\n      \"date_created\": \"2024-04-24T13:33:39.096780-07:00\",\n      \"date_modified\": \"2024-04-24T13:33:39.096790-07:00\",\n      \"name\": \"Samuel Jackson\",\n      \"extra_info\": \"\"\n    },\n    ...\n\nNote that:\n\nThere are 35 parties in this case. (Only the first is shown in this example.)\n\nThe first party (ID 42) has had two attorneys. The first attorney (ID 1) represented them with role 10 in case 123 (the one we filtered to). The second attorney (ID 2) represented party 42 with role 2 in case 456.\n\nThe party_types field indicates the role the party has in the case (defendant, plaintiff, trustee, etc).\n\nIn criminal cases, the party_type field may also include the highest offenses, criminal counts, and criminal complaints against the defendant.\n\nThese endpoints are only available to select users. Please get in touch to access these endpoints.\n\nAttorneys â /api/rest/v4/attorneys/\n\nUse this API to look up an attorney in our system.\n\nTo look up field descriptions or options for filtering, ordering, or rendering, complete an HTTP OPTIONS request.\n\nLike docket entries and parties, attorneys can be filtered to a particular docket. For example:\n\n Listen Up: Like the parties endpoint, filters applied to this endpoint only affect the top-level data. To filter the nested data for each attorney, include the filter_nested_results=True parameter in your API request URL.\n\ncurl -v \\\n  --header 'Authorization: Token <your-token-here>' \\\n  \"https://www.courtlistener.com/api/rest/v4/attorneys/?docket=4214664\"\n\nReturns:\n\n{\n    \"next\": \"https://www.courtlistener.com/api/rest/v4/attorneys/?docket=4214664&cursor=cD0xMjA5NjAyMg%3D%3D&docket=4214664\",\n    \"previous\": null,\n    \"results\": [\n        {\n            \"resource_uri\": \"https://www.courtlistener.com/api/rest/v4/attorneys/9247906/\",\n            \"id\": 9247906,\n            \"parties_represented\": [\n                {\n                    \"role\": 10,\n                    \"docket\": \"https://www.courtlistener.com/api/rest/v4/dockets/4214664/\",\n                    \"party\": \"https://www.courtlistener.com/api/rest/v4/parties/13730908/\",\n                    \"date_action\": null\n                }\n            ],\n            \"date_created\": \"2024-04-24T13:33:39.109264-07:00\",\n            \"date_modified\": \"2024-05-07T21:32:12.465340-07:00\",\n            \"name\": \"ERIC ALAN ISAACSON\",\n            \"contact_raw\": \"6580 Avenida Mirola\\nLa Jolla, CA 92037\\n(858) 263-9581\\nPRO SE\\n\",\n            \"phone\": \"(858) 263-9581\",\n            \"fax\": \"\",\n            \"email\": \"\"\n        },\n  ...\n\nSimilar to the party API above, when you filter attorneys to a particular docket, the nested parties_represented field is not filtered and can show other parties the attorney represented in other dockets.\n\nThese endpoints are only available to select users. Please get in touch to access these endpoints.\n\nOriginating Court â /api/rest/v4/originating-court-information/\n\nOriginating Court Information represents the information gathered at an appellate court about a case when it was in a lower court or administrative body.\n\nThe information in this table is joined via a one-to-one relationship to the Docket object. Generally, this table is only completed for appellate cases that we acquire from PACER.\n\nCross-walking from the upper court docket to the lower is possible using the the docket_number and appeal_from fields.\n\nIntegrated Database â /api/rest/v4/fjc-integrated-database/\n\nFJC Integrated Database objects represent the information available in the Federal Judicial Center's Integrated Database, a regularly updated source of metadata about federal court cases. You can learn more about the IDB from the following sources:\n\nThe FJC IDB Homepage\nOur datasheet on the IDB\nThe various codebooks for civil, criminal, appellate, and bankruptcy datasets.\n\nAs always, you can find our interpretations of these fields by performing an OPTIONS request on this endpoint.\n\nNote: Pending further support, this endpoint should be considered experimental quality. It is not guaranteed to have all of the available data sets, may not have the latest quarterly data, and indeed may have bugs. If you encounter any bugs, please let us know. If you would like better guarantees about the quality of this endpoint, we are enthusiastic about finding partners to better support it.\n\nFast Document Lookup â /api/rest/v4/recap-query/\n\nThis API is used to check if documents with known IDs are available in our system.\n\nTo use it, provide a court ID and a comma-separated list of pacer_doc_id's:\n\ncurl \\\n  --header 'Authorization: Token <your-token-here>' \\\n  'https://www.courtlistener.com/api/rest/v4/recap-query/?docket_entry__docket__court=dcd&pacer_doc_id__in=04505578698,04505578717' \\\n  \n\nThis will return one entry for each document found, up to a maximum of 300 items:\n\n{\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"pacer_doc_id\": \"04505578717\",\n      \"filepath_local\": \"recap/gov.uscourts.dcd.178502/gov.uscourts.dcd.178502.2.0_54.pdf\",\n      \"id\": 2974081\n    },\n    {\n      \"pacer_doc_id\": \"04505578698\",\n      \"filepath_local\": \"recap/gov.uscourts.dcd.178502/gov.uscourts.dcd.178502.1.0_48.pdf\",\n      \"id\": 2974077\n    }\n  ]\n}\n\nCourtListener court IDs match the subdomains on PACER, except for the following mapping:\n\nPACER Code\tCL ID\tDescription\nazb\tarb\tArizona Bankruptcy Court\ncofc\tuscfc\tCourt of Federal Claims\nneb\tnebraskab\tNebraska Bankruptcy\nnysb-mega\tnysb\tDo not use \"mega\"\n\n Careful: When placing queries, the fourth digit of a PACER document ID can be a zero or one. We always normalize it to zero, and you will need to do so in your queries.\n\nTo query whether a case is in our system, use the Docket endpoint described above.\n\nThis endpoint is only available to select users. Please get in touch to access this API.\n\nPlease Support Open LegalÂ Data\n\nThese services are sponsored by Free Law Project and users like you. We provide these services in furtherance of our mission to make the legal sector more innovative and equitable.\n\nWe have provided these services for over a decade, and we need your contributions to continue curating and enhancing them.\n\nWill you support us today by becoming a member?\n\n Join FLP"
}
