openapi: 3.0.3
info:
  title: Department of Labor (DOL) Open Data API
  description: |
    The DOL API is a web service that provides on-demand access to machine readable metadata and data from the U.S. Department of Labor.

    **Important Notice:** This is the v4 API, part of the 2025 API migration from v1/v2. All users must migrate to this version.

    **Benefits:**
    - Customizable response - request subsets of data instead of entire datasets
    - Automation - reuse customized data requests for productive workflows  
    - Live and updated data - always returns the latest data with documented update frequencies
    - Programming-language agnostic - works with Python, R, SAS, and more
    - Read-only access - all operations are safe, idempotent queries

    **Getting Started:**
    1. Register for an account at https://dataportal.dol.gov/registration (registration is required)
    2. Complete the questionnaire to get an API key
    3. Use your API key as a query parameter (X-API-KEY=your_key) for all data requests

    **Rate Limits:**
    - Up to 5 MB of data or 10,000 records per request (whichever limit is hit first)
    - Up to 5 API keys per account
    - Rate limit information may be returned in response headers (when implemented):
      - X-RateLimit-Limit: Maximum requests allowed
      - X-RateLimit-Remaining: Requests remaining in current window
      - X-RateLimit-Reset: Unix timestamp when the rate limit resets
      - Note: Rate limit headers are not implemented on all endpoints

    **Data Freshness:**
    - Dataset update frequencies vary by source
    - Check the 'last_updated' field in metadata responses
    - Most datasets are updated daily, weekly, or monthly

    **Finding Agency and Endpoint Combinations:**
    - Use the `/datasets` endpoint to discover all available datasets (note: this endpoint is paginated)
    - Each dataset includes an `agency` object with abbreviation and an `api_url` field
    - Common agencies include: 'msha' (Mine Safety and Health Administration), 'ilab' (Bureau of International Labor Affairs),
      'wb' (Women's Bureau), 'osha' (Occupational Safety and Health Administration), 'ebsa' (Employee Benefits Security Administration)
    - Example dataset endpoints: msha/accident, ilab/better_trade_tool_core_data, wb/ndcp
    - To access all datasets, iterate through pages using the `page` query parameter
    - Note: Some agencies like BLS may not have datasets in the current catalog
  version: 4.0.0
  contact:
    name: DOL Open Data Portal Support
    url: https://dataportal.dol.gov
    email: opendata@dol.gov
  license:
    name: Public Domain
    url: https://www.usa.gov/government-works
servers:
  - url: https://apiprod.dol.gov/v4
    description: Production API Server
security:
  - ApiKeyAuth: []
tags:
  - name: Datasets
    description: Operations for discovering available datasets
  - name: Data
    description: Operations for retrieving dataset data
  - name: Metadata
    description: Operations for retrieving dataset metadata
paths:
  /datasets:
    get:
      tags:
        - Datasets
      summary: List Available Datasets
      description: |
        Retrieve the catalog of datasets available through the DOL API in JSON format.
        This endpoint does not require an API key.

        **Important:** This endpoint returns a paginated response. The response is an array where:
        - All elements except the last are dataset objects
        - The last element is a pagination metadata object

        **Note on Response Structure:** This is a non-standard pagination approach. When processing 
        the response, you need to separate the last element (pagination metadata) from the dataset 
        objects. For example, in JavaScript: `const datasets = response.slice(0, -1); const pagination = response[response.length - 1];`

        Use this endpoint to discover:
        - Available agency abbreviations (in the `agency.abbr` field)
        - Dataset endpoints (in the `api_url` field)
        - Dataset descriptions and metadata
      security: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
      responses:
        "200":
          description: Paginated list of available datasets
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: "#/components/schemas/Dataset"
                    - $ref: "#/components/schemas/PaginationMetadata"
              example:
                - id: 10267
                  name: "Better Trade Tool Core Data"
                  agency:
                    name: "Bureau of International Labor Affairs"
                    abbr: "ILAB"
                  api_url: "better_trade_tool_core_data"
                  description: "Information on child labor and forced labor worldwide with U.S. import trade data"
                  tag_list: ["sector", "other countries", "goods", "trade"]
                  category:
                    name: "Child Labor"
                  frequency: "Ad-Hoc"
                  published_at: "2024-10-31T13:18:11"
                  tablename: "ILAB_better_trade_tool_core_data"
                  dataset_type: 1
                  agency_id: 24
                  tablename_alias: null
                  category_id: 6
                  category_name: "Child Labor"
                  status: 4
                  created_at: "2024-10-30T22:01:10"
                  updated_at: "2024-10-31T13:22:38"
                - id: 10227
                  name: "Accident"
                  agency:
                    name: "Mine Safety and Health Administration"
                    abbr: "MSHA"
                  api_url: "accident"
                  description: "Information on all accidents, injuries and illnesses reported by mine operators"
                  tag_list: ["accidents", "contractors", "fatalities", "mines"]
                  category:
                    name: "Enforcement"
                  frequency: "Weekly"
                  published_at: "2024-10-11T19:50:24"
                  tablename: "MSHA_accident"
                  dataset_type: 1
                  agency_id: 20
                  tablename_alias: null
                  category_id: 13
                  category_name: "Enforcement"
                  status: 4
                  created_at: "2024-10-11T19:32:18"
                  updated_at: "2024-10-11T19:50:55"
                - current_page: 1
                  next_page: 2
                  prev_page: null
                  total_pages: 5
                  total_count: 42
        "500":
          $ref: "#/components/responses/ServerError"

  /get/{agency}/{endpoint}/{format}:
    get:
      tags:
        - Data
      summary: Retrieve Dataset Data
      description: |
        Retrieve data from a specific dataset with optional filtering, sorting, and field selection.

        **Response Structure:** Data endpoints return responses wrapped in a `{"data": [...]}` object.
        The `data` property contains an array of records whose structure varies by dataset.
      parameters:
        - $ref: "#/components/parameters/Agency"
        - $ref: "#/components/parameters/Endpoint"
        - $ref: "#/components/parameters/Format"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Fields"
        - $ref: "#/components/parameters/Sort"
        - $ref: "#/components/parameters/SortBy"
        - $ref: "#/components/parameters/FilterObject"
      x-code-samples:
        - lang: curl
          label: Basic Request
          source: |
            curl 'https://apiprod.dol.gov/v4/get/msha/accident/json?X-API-KEY=your_api_key_here'
        - lang: curl
          label: With Parameters
          source: |
            curl 'https://apiprod.dol.gov/v4/get/msha/accident/json?X-API-KEY=your_api_key_here&limit=10&fields=mine_id,ai_dt,inj_degr_desc,operator_name,fips_state_cd'
      responses:
        "200":
          description: Dataset records retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataResponse"
              example:
                data:
                  - mine_id: "4601437"
                    cntctr_id: null
                    subunit_cd: "02"
                    subunit_desc: "SURFACE AT UNDERGROUND"
                    ai_dt: "2013-12-16T00:00:00"
                    inj_degr_desc: "DAYS AWAY FROM WORK ONLY"
                    ai_class_desc: "SLIP OR FALL OF PERSON"
                    ai_occ_desc: "Electrician, Lineman"
                    ai_acty_desc: "Walking, Running"
                    exper_tot_calc: 21.0
                    exper_mine_calc: 10.0
                    exper_job_calc: 1.0
                    controller_id: "C13408"
                    controller_name: "Robert E  Murray"
                    operator_id: "P18717"
                    operator_name: "McElroy Coal Company"
                    document_no: "220140060030"
                    cal_yr: 2013
                    degree_injury_cd: "03"
                    fips_state_cd: "54"
                    no_injuries: 1
                    days_lost: 121
                    coal_metal_ind: "C"
                    load_dt: "2025-07-19T00:35:36"
                  - mine_id: "4601438"
                    cntctr_id: null
                    subunit_cd: "01"
                    subunit_desc: "UNDERGROUND"
                    ai_dt: "1987-03-25T00:00:00"
                    inj_degr_desc: "DAYS AWAY FROM WORK ONLY"
                    ai_class_desc: "STEPPING OR KNEELING ON OBJECT"
                    operator_name: "Consolidation Coal Company"
                    document_no: "219871460046"
                    cal_yr: 1987
                    fips_state_cd: "54"
                    no_injuries: 1
                    days_lost: 8
                    coal_metal_ind: "C"
            application/xml:
              schema:
                $ref: "#/components/schemas/DataResponse"
            text/csv:
              schema:
                type: string
                description: CSV formatted data
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

  /get/{agency}/{endpoint}/{format}/metadata:
    get:
      tags:
        - Metadata
      summary: Retrieve Dataset Metadata
      description: |
        Retrieve comprehensive metadata about a dataset including field descriptions,
        data types, and other characteristics that help understand the dataset structure.

        **Note:** XML format is not supported for metadata endpoints. Use JSON or CSV format only.
      parameters:
        - $ref: "#/components/parameters/Agency"
        - $ref: "#/components/parameters/Endpoint"
        - name: format
          in: path
          required: true
          description: Response format for the metadata (XML not supported)
          schema:
            type: string
            enum: [json, csv]
      responses:
        "200":
          description: Metadata retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetadataResponse"
            text/csv:
              schema:
                type: string
                description: CSV formatted metadata
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: query
      name: X-API-KEY
      description: |
        API key for authentication. Required for all data and metadata requests.
        Get your API key by registering at https://dataportal.dol.gov/registration
        As part of the 2025 API migration, the API key must now be sent as a query parameter.

  parameters:
    Agency:
      name: agency
      in: path
      required: true
      description: |
        Agency name abbreviation. Common values include:
        - 'msha' - Mine Safety and Health Administration
        - 'ilab' - Bureau of International Labor Affairs  
        - 'wb' - Women's Bureau
        - 'bls' - Bureau of Labor Statistics
        - 'osha' - Occupational Safety and Health Administration
        - 'ebsa' - Employee Benefits Security Administration

        Get the complete list from the /datasets endpoint
      schema:
        type: string
        example: "msha"

    Endpoint:
      name: endpoint
      in: path
      required: true
      description: |
        Dataset endpoint/identifier from the datasets catalog (the 'api_url' field).
        Examples: 'accident', 'ndcp', 'better_trade_tool_core_data', 'sweat_toil_goods_data'

        Get available endpoints from the /datasets endpoint
      schema:
        type: string
        example: "accident"

    Format:
      name: format
      in: path
      required: true
      description: Response format for the data
      schema:
        type: string
        enum: [json, xml, csv]

    Limit:
      name: limit
      in: query
      description: Maximum number of records to return (max 10,000 records or 5MB)
      schema:
        type: integer
        minimum: 1
        maximum: 10000
        default: 10

    Offset:
      name: offset
      in: query
      description: Number of records to skip from the top of the dataset
      schema:
        type: integer
        minimum: 0
        default: 0

    Fields:
      name: fields
      in: query
      description: |
        Comma-separated list of specific field names to include in response.
        If not specified, all fields are returned.

        Example fields for MSHA accident dataset: mine_id, ai_dt, inj_degr_desc, operator_name, fips_state_cd, days_lost
      schema:
        type: string
        example: "mine_id,ai_dt,inj_degr_desc,operator_name,fips_state_cd"

    Sort:
      name: sort
      in: query
      description: Sort direction for the returned records
      schema:
        type: string
        enum: [asc, desc]
        example: "asc"

    SortBy:
      name: sort_by
      in: query
      description: Field name to sort records by
      schema:
        type: string
        example: "ai_dt"

    FilterObject:
      name: filter_object
      in: query
      description: |
        JSON formatted string specifying conditional filters to apply.

        **Supported operators:**
        - `eq` - equals
        - `neq` - not equals
        - `gt` - greater than
        - `lt` - less than
        - `in` - value is in array
        - `not_in` - value is not in array
        - `like` - pattern matching (use % as wildcard)

        **Examples:**

        Simple filter:
        ```json
        {"field":"fips_state_cd","operator":"eq","value":"54"}
        ```

        Filter by injury type:
        ```json
        {"field":"inj_degr_desc","operator":"eq","value":"DAYS AWAY FROM WORK ONLY"}
        ```

        Multiple conditions with AND:
        ```json
        {"and":[{"field":"coal_metal_ind","operator":"eq","value":"C"},{"field":"cal_yr","operator":"eq","value":"2013"}]}
        ```

        Multiple conditions with OR:
        ```json
        {"or":[{"field":"value","operator":"lt","value":500},{"field":"value","operator":"gt","value":999}]}
        ```

        Complex nested conditions:
        ```json
        {"and":[{"field":"year","operator":"eq","value":"2021"},{"or":[{"field":"industry","operator":"eq","value":"A"},{"field":"industry","operator":"eq","value":"C"}]}]}
        ```

        Pattern matching with LIKE:
        ```json
        {"field":"industry","operator":"like","value":"%A%"}
        ```

        IN operator with array:
        ```json
        {"field":"state","operator":"in","value":["CA","NY","TX"]}
        ```
      schema:
        type: string
        example: '{"field":"fips_state_cd","operator":"eq","value":"54"}'

  schemas:
    Dataset:
      type: object
      properties:
        id:
          type: integer
          description: Unique dataset identifier
        name:
          type: string
          description: Human-readable dataset name
        agency:
          type: object
          properties:
            name:
              type: string
              description: Full agency name
            abbr:
              type: string
              description: Agency abbreviation (use this value for API calls)
          description: Agency that owns the dataset
        api_url:
          type: string
          description: URL endpoint for accessing this dataset via API (use this value for API calls)
        description:
          type: string
          description: Description of the dataset contents
        tag_list:
          type: array
          items:
            type: string
          description: Tags associated with the dataset
        category:
          type: object
          properties:
            name:
              type: string
          description: Dataset category
        frequency:
          type: string
          description: Update frequency of the dataset
        published_at:
          type: string
          format: date-time
          description: When the dataset was published
        tablename:
          type: string
          description: Internal database table name
        dataset_type:
          type: integer
          description: Type identifier for the dataset
        agency_id:
          type: integer
          description: Numeric identifier for the agency
        tablename_alias:
          type: string
          nullable: true
          description: Alternative table name if applicable
        category_id:
          type: integer
          description: Numeric identifier for the category
        category_name:
          type: string
          description: Name of the category
        status:
          type: integer
          description: Status code for the dataset
        created_at:
          type: string
          format: date-time
          description: When the dataset was created in the system
        updated_at:
          type: string
          format: date-time
          description: When the dataset was last updated

    PaginationMetadata:
      type: object
      description: Pagination metadata included as the last element in the datasets array
      properties:
        current_page:
          type: integer
          description: Current page number
        next_page:
          type: integer
          nullable: true
          description: Next page number if available
        prev_page:
          type: integer
          nullable: true
          description: Previous page number if available
        total_pages:
          type: integer
          description: Total number of pages
        total_count:
          type: integer
          description: Total number of datasets across all pages

    DataResponse:
      type: object
      description: |
        The standard response structure for data requests. Data is wrapped in a "data" property
        containing an array of records. The structure of individual records varies by dataset.
      properties:
        data:
          type: array
          items:
            type: object
            description: Individual data records (structure varies by dataset)
            additionalProperties: true
        metadata:
          type: object
          description: Optional metadata about the response (not always included)
          properties:
            total_records:
              type: integer
              description: Total number of records in the complete dataset
            returned_records:
              type: integer
              description: Number of records returned in this response
            limit:
              type: integer
              description: Limit parameter used in the request
            offset:
              type: integer
              description: Offset parameter used in the request
      required:
        - data

    MetadataResponse:
      type: object
      properties:
        fields:
          type: array
          items:
            $ref: "#/components/schemas/FieldMetadata"
        dataset_info:
          type: object
          properties:
            name:
              type: string
            description:
              type: string
            last_updated:
              type: string
              format: date-time
            record_count:
              type: integer

    FieldMetadata:
      type: object
      properties:
        field_name:
          type: string
          description: Name of the field/column
        data_type:
          type: string
          description: Data type of the field
        description:
          type: string
          description: Description of what the field contains
        is_nullable:
          type: boolean
          description: Whether the field can contain null values
        max_length:
          type: integer
          description: Maximum length for string fields

    FilterCondition:
      type: object
      properties:
        field:
          type: string
          description: Field name to apply the filter on
        operator:
          type: string
          enum: [eq, neq, gt, lt, in, not_in, like]
          description: |
            Filter operator:
            - eq: equals
            - neq: not equals  
            - gt: greater than
            - lt: less than
            - in: value is in array
            - not_in: value is not in array
            - like: pattern matching (use % as wildcard)
        value:
          oneOf:
            - type: string
            - type: number
            - type: array
              items:
                oneOf:
                  - type: string
                  - type: number
          description: Value(s) to compare against
      required:
        - field
        - operator
        - value
      example:
        field: "fips_state_cd"
        operator: "eq"
        value: "54"

    ComplexFilter:
      type: object
      properties:
        and:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/FilterCondition"
              - $ref: "#/components/schemas/ComplexFilter"
          description: All conditions must be true
        or:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/FilterCondition"
              - $ref: "#/components/schemas/ComplexFilter"
          description: At least one condition must be true
      example:
        and:
          - field: "cal_yr"
            operator: "eq"
            value: "2013"
          - or:
              - field: "coal_metal_ind"
                operator: "eq"
                value: "C"
              - field: "coal_metal_ind"
                operator: "eq"
                value: "M"

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
        code:
          type: integer
          description: HTTP status code
        details:
          type: string
          description: Additional error details

  responses:
    BadRequest:
      description: Invalid request parameters
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            error: "Invalid parameter value"
            code: 400
            details: "The 'limit' parameter must be between 1 and 10000"

    Unauthorized:
      description: Invalid or missing API key
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            error: "Authentication required"
            code: 401
            details: "Valid X-API-KEY query parameter is required for data and metadata requests"

    NotFound:
      description: Dataset or endpoint not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            error: "Dataset not found"
            code: 404
            details: "The specified agency/endpoint combination does not exist"
        text/plain:
          schema:
            type: string
          example: "There was a server error querying the dataset.Please ensure the dataset name in the URL is correct."

    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            error: "Internal server error"
            code: 500
            details: "An unexpected error occurred while processing your request"

  examples:
    SimpleFilter:
      summary: Simple equality filter
      value: '{"field":"coal_metal_ind","operator":"eq","value":"C"}'

    InFilter:
      summary: Filter with IN operator
      value: '{"field":"fips_state_cd","operator":"in","value":["54","42","39"]}'

    DateRangeFilter:
      summary: Date range filter with AND logic
      value: '{"and":[{"field":"cal_yr","operator":"gt","value":"2010"},{"field":"cal_yr","operator":"lt","value":"2015"}]}'

    ComplexFilter:
      summary: Complex filter with AND/OR logic
      value: '{"and":[{"field":"cal_yr","operator":"eq","value":"2013"},{"or":[{"field":"inj_degr_desc","operator":"eq","value":"FATAL"},{"field":"days_lost","operator":"gt","value":"100"}]}]}'

    LikeFilter:
      summary: Pattern matching with LIKE operator
      value: '{"field":"ai_class_desc","operator":"like","value":"%MACHINERY%"}'
