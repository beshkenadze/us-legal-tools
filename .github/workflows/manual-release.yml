name: Manual Release

on:
  workflow_dispatch:
    inputs:
      packages:
        description: 'Packages to release (comma-separated, e.g., ecfr-sdk,federal-register-sdk)'
        required: false
        type: string
      release-type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
      prerelease-tag:
        description: 'Prerelease tag (alpha, beta, rc)'
        required: false
        type: string
        default: 'alpha'

jobs:
  release:
    name: Manual Release
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: write
      packages: write
      pull-requests: write
      issues: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Node.js for NPM
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org'

      - name: Configure git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Setup Playwright
        run: bunx playwright install --with-deps chromium

      - name: Generate SDKs
        run: bunx turbo run generate

      - name: Run tests
        run: bunx turbo run test
        env:
          GOV_INFO_API_KEY: ${{ secrets.GOV_INFO_API_KEY }}
          DOL_API_KEY: ${{ secrets.DOL_API_KEY }}

      - name: Build packages
        run: bunx turbo run build

      - name: Create changeset
        run: |
          # Determine which packages to release
          if [ -n "${{ inputs.packages }}" ]; then
            PACKAGES="${{ inputs.packages }}"
          else
            # Get all public packages
            PACKAGES=$(bun run --silent changeset status --output=json | jq -r '.releases[].name' | tr '\n' ',')
            PACKAGES=${PACKAGES%,}  # Remove trailing comma
          fi
          
          # Create changeset file
          CHANGESET_ID=$(date +%s)
          CHANGESET_FILE=".changeset/manual-release-${CHANGESET_ID}.md"
          
          echo "---" > $CHANGESET_FILE
          
          # Add packages to changeset
          IFS=',' read -ra PACKAGE_ARRAY <<< "$PACKAGES"
          for package in "${PACKAGE_ARRAY[@]}"; do
            # Add @ prefix if not present
            if [[ ! "$package" =~ ^@ ]]; then
              package="@beshkenadze/$package"
            fi
            echo "\"$package\": ${{ inputs.release-type }}" >> $CHANGESET_FILE
          done
          
          echo "---" >> $CHANGESET_FILE
          echo "" >> $CHANGESET_FILE
          echo "Manual release: ${{ inputs.release-type }} version bump for selected packages" >> $CHANGESET_FILE
          
          # Show the changeset
          cat $CHANGESET_FILE
          
          # Commit the changeset
          git add .changeset
          git commit -m "chore: add changeset for manual release"

      - name: Version packages
        run: |
          if [ "${{ inputs.release-type }}" = "prerelease" ]; then
            bun run changeset version --snapshot ${{ inputs.prerelease-tag }}
          else
            bun run changeset version
          fi
          
          # Commit version changes
          git add .
          git commit -m "chore: version packages for manual release" || echo "No changes to commit"

      - name: Publish packages
        run: |
          if [ "${{ inputs.release-type }}" = "prerelease" ]; then
            bun run changeset publish --tag ${{ inputs.prerelease-tag }}
          else
            bun run changeset publish
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Push changes
        run: |
          git push origin main --follow-tags

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}-manual
          release_name: Manual Release ${{ github.run_number }}
          body: |
            ## Manual Release
            
            **Release Type**: ${{ inputs.release-type }}
            **Packages**: ${{ inputs.packages || 'All packages' }}
            
            This is a manual release triggered via workflow dispatch.
          draft: false
          prerelease: ${{ inputs.release-type == 'prerelease' }}

      - name: Success notification
        run: |
          echo "ðŸŽ‰ Successfully published packages!"
          echo "ðŸ“¦ Check npm: https://www.npmjs.com/~beshkenadze"
          echo "ðŸ“¦ GitHub Packages: https://github.com/${{ github.repository }}/packages"