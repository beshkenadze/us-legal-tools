name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version type (patch, minor, major)'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
      message:
        description: 'Release message'
        required: false
        type: string
        default: 'Manual release'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Node.js for NPM
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: bun install

      - name: Run tests
        run: |
          echo "🧪 Running all tests..."
          bun test src
          echo "✅ All tests passed"

      - name: Build SDK
        run: |
          echo "🔨 Building SDK..."
          bun run build

      - name: Bump version
        id: version
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Get current version
          CURRENT_VERSION=$(cat package.json | grep '"version"' | head -1 | awk -F'"' '{print $4}')
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # Bump version
          npm version ${{ github.event.inputs.version }} --no-git-tag-version
          
          # Get new version
          NEW_VERSION=$(cat package.json | grep '"version"' | head -1 | awk -F'"' '{print $4}')
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          echo "📦 Version bumped from $CURRENT_VERSION to $NEW_VERSION"

      - name: Generate changelog
        id: changelog
        run: |
          # Get commit history since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          echo "## Release v${{ steps.version.outputs.new_version }}" > CHANGELOG_TEMP.md
          echo "" >> CHANGELOG_TEMP.md
          echo "### ${{ github.event.inputs.message }}" >> CHANGELOG_TEMP.md
          echo "" >> CHANGELOG_TEMP.md
          
          if [ -n "$LAST_TAG" ]; then
            echo "### Changes since $LAST_TAG" >> CHANGELOG_TEMP.md
            echo "" >> CHANGELOG_TEMP.md
            
            # Group commits by type
            echo "#### Features" >> CHANGELOG_TEMP.md
            git log ${LAST_TAG}..HEAD --grep="^feat" --pretty=format:"- %s" >> CHANGELOG_TEMP.md || true
            echo "" >> CHANGELOG_TEMP.md
            
            echo "#### Bug Fixes" >> CHANGELOG_TEMP.md
            git log ${LAST_TAG}..HEAD --grep="^fix" --pretty=format:"- %s" >> CHANGELOG_TEMP.md || true
            echo "" >> CHANGELOG_TEMP.md
            
            echo "#### Other Changes" >> CHANGELOG_TEMP.md
            git log ${LAST_TAG}..HEAD --grep="^chore\|^docs\|^test\|^refactor" --pretty=format:"- %s" >> CHANGELOG_TEMP.md || true
            echo "" >> CHANGELOG_TEMP.md
          fi
          
          # Contributors
          echo "### Contributors" >> CHANGELOG_TEMP.md
          git log ${LAST_TAG}..HEAD --pretty=format:"%an" | sort -u | sed 's/^/- @/' >> CHANGELOG_TEMP.md
          
          # Save for output
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG_TEMP.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Commit version bump
        run: |
          git add package.json package-lock.json
          git commit -m "chore: release v${{ steps.version.outputs.new_version }}"
          git push

      - name: Create and push tag
        run: |
          git tag -a "v${{ steps.version.outputs.new_version }}" -m "Release v${{ steps.version.outputs.new_version }}"
          git push origin "v${{ steps.version.outputs.new_version }}"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          release_name: Release v${{ steps.version.outputs.new_version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false

      - name: Publish to NPM
        run: |
          echo "📤 Publishing to NPM..."
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Success notification
        run: |
          echo "🎉 Successfully released v${{ steps.version.outputs.new_version }}!"
          echo "📦 NPM: https://www.npmjs.com/package/ecfr-sdk"
          echo "🏷️ GitHub: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.new_version }}"