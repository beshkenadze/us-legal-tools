name: Update SDK and Publish

on:
  push:
    branches: [main]
  schedule:
    # Run daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      skip_cache:
        description: 'Skip cache and force regeneration'
        required: false
        type: boolean
        default: false

jobs:
  update-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    services:
      chrome:
        image: browserless/chrome:latest
        ports:
          - 9222:9222
        options: --shm-size="2g"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Restore swagger cache
        id: cache-swagger
        uses: actions/cache@v4
        with:
          path: docs/v1.json
          key: swagger-${{ hashFiles('docs/v1.json') }}
          restore-keys: |
            swagger-

      - name: Download latest Swagger spec
        id: download_swagger
        run: |
          # Save current swagger if it exists
          if [ -f "docs/v1.json" ]; then
            cp docs/v1.json docs/v1.json.old
          fi
          
          # Try to download new swagger
          if bun run scripts/download-swagger.ts; then
            echo "download_success=true" >> $GITHUB_OUTPUT
            
            # Check if swagger changed
            if [ -f "docs/v1.json.old" ]; then
              if diff -q docs/v1.json docs/v1.json.old > /dev/null 2>&1; then
                echo "swagger_changed=false" >> $GITHUB_OUTPUT
                echo "✅ Swagger spec unchanged"
              else
                echo "swagger_changed=true" >> $GITHUB_OUTPUT
                echo "📝 Swagger spec has changed"
              fi
              rm -f docs/v1.json.old
            else
              echo "swagger_changed=true" >> $GITHUB_OUTPUT
              echo "📝 First time downloading swagger spec"
            fi
          else
            echo "download_success=false" >> $GITHUB_OUTPUT
            echo "❌ Download failed"
            if [ -f "docs/v1.json.old" ]; then
              mv docs/v1.json.old docs/v1.json
            fi
          fi

      - name: Generate SDK and MCP server
        if: steps.download_swagger.outputs.swagger_changed == 'true' || github.event.inputs.skip_cache == 'true' || steps.cache-swagger.outputs.cache-hit != 'true'
        run: bun run generate

      - name: Run linter and formatter
        if: steps.download_swagger.outputs.swagger_changed == 'true' || github.event.inputs.skip_cache == 'true' || steps.cache-swagger.outputs.cache-hit != 'true'
        run: |
          bun run format
          bun run check

      - name: Build SDK
        run: bun run build

      - name: Check for changes
        id: check_changes
        run: |
          git diff --quiet || echo "changes=true" >> $GITHUB_OUTPUT

      - name: Commit changes
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git commit -m "chore: update SDK from latest API spec [skip ci]" || exit 0
          git push

      - name: Create Release
        if: steps.check_changes.outputs.changes == 'true'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            Automated release from latest eCFR API specification.
            
            Changes in this release:
            - Updated SDK from latest API spec
            - Regenerated MCP server handlers
          draft: false
          prerelease: false

      - name: Setup Node.js for NPM
        if: steps.check_changes.outputs.changes == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Publish to NPM
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          # Update version based on run number
          npm version patch --no-git-tag-version
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  ci:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref != 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Run linter
        run: bun run check:ci

      - name: Run tests
        run: bun test

      - name: Build SDK
        run: bun run build