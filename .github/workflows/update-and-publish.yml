name: Update SDK and Publish

on:
  push:
    branches: [main]
  schedule:
    # Run daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      skip_cache:
        description: 'Skip cache and force regeneration'
        required: false
        type: boolean
        default: false
      force_publish:
        description: 'Force publish even without changes'
        required: false
        type: boolean
        default: false

jobs:
  update-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    services:
      chrome:
        image: browserless/chrome:latest
        ports:
          - 9222:9222
        options: --shm-size="2g"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Restore swagger cache
        id: cache-swagger
        uses: actions/cache@v4
        with:
          path: docs/v1.json
          key: swagger-${{ hashFiles('docs/v1.json') }}
          restore-keys: |
            swagger-

      - name: Download latest Swagger spec
        id: download_swagger
        run: |
          # Save current swagger if it exists
          if [ -f "docs/v1.json" ]; then
            cp docs/v1.json docs/v1.json.old
          fi
          
          # Try to download new swagger
          if bun run scripts/download-swagger.ts; then
            echo "download_success=true" >> $GITHUB_OUTPUT
            
            # Check if swagger changed
            if [ -f "docs/v1.json.old" ]; then
              if diff -q docs/v1.json docs/v1.json.old > /dev/null 2>&1; then
                echo "swagger_changed=false" >> $GITHUB_OUTPUT
                echo "✅ Swagger spec unchanged"
              else
                echo "swagger_changed=true" >> $GITHUB_OUTPUT
                echo "📝 Swagger spec has changed"
              fi
              rm -f docs/v1.json.old
            else
              echo "swagger_changed=true" >> $GITHUB_OUTPUT
              echo "📝 First time downloading swagger spec"
            fi
          else
            echo "download_success=false" >> $GITHUB_OUTPUT
            echo "❌ Download failed"
            if [ -f "docs/v1.json.old" ]; then
              mv docs/v1.json.old docs/v1.json
            fi
          fi

      - name: Generate SDK and MCP server
        if: steps.download_swagger.outputs.swagger_changed == 'true' || github.event.inputs.skip_cache == 'true' || steps.cache-swagger.outputs.cache-hit != 'true'
        run: bun run generate

      - name: Run linter and formatter
        if: steps.download_swagger.outputs.swagger_changed == 'true' || github.event.inputs.skip_cache == 'true' || steps.cache-swagger.outputs.cache-hit != 'true'
        run: |
          bun run format
          bun run check

      - name: Run tests
        run: |
          echo "🧪 Running unit tests..."
          bun test src
          
          # Run integration tests if swagger changed
          if [ "${{ steps.download_swagger.outputs.swagger_changed }}" == "true" ]; then
            echo "🔄 Running integration tests..."
            SKIP_INTEGRATION_TESTS=false bun test src
          fi

      - name: Build SDK
        run: |
          echo "🔨 Building SDK..."
          bun run build

      - name: Check for changes and version
        id: check_changes
        run: |
          # Check for git changes
          if git diff --quiet && git diff --cached --quiet; then
            echo "changes=false" >> $GITHUB_OUTPUT
          else
            echo "changes=true" >> $GITHUB_OUTPUT
          fi
          
          # Extract current version from package.json
          CURRENT_VERSION=$(cat package.json | grep '"version"' | head -1 | awk -F'"' '{print $4}')
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # Determine next version
          if [ "${{ steps.download_swagger.outputs.swagger_changed }}" == "true" ]; then
            # Minor bump for API changes
            NEXT_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."$2+1".0"}')
            echo "version_type=minor" >> $GITHUB_OUTPUT
          else
            # Patch bump for other changes
            NEXT_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."$2"."$3+1}')
            echo "version_type=patch" >> $GITHUB_OUTPUT
          fi
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT

      - name: Generate changelog
        if: steps.check_changes.outputs.changes == 'true' || github.event.inputs.force_publish == 'true'
        id: changelog
        run: |
          echo "📝 Generating changelog..."
          CHANGELOG="## Changes in v${{ steps.check_changes.outputs.next_version }}\n\n"
          
          if [ "${{ steps.download_swagger.outputs.swagger_changed }}" == "true" ]; then
            CHANGELOG="${CHANGELOG}### API Updates\n"
            CHANGELOG="${CHANGELOG}- Updated SDK from latest eCFR API specification\n"
            CHANGELOG="${CHANGELOG}- Regenerated TypeScript types and MCP handlers\n\n"
          fi
          
          # Get git changes summary
          if [ "${{ steps.check_changes.outputs.changes }}" == "true" ]; then
            CHANGELOG="${CHANGELOG}### Code Changes\n"
            git diff --name-status | while read status file; do
              case $status in
                A) CHANGELOG="${CHANGELOG}- Added: $file\n" ;;
                M) CHANGELOG="${CHANGELOG}- Modified: $file\n" ;;
                D) CHANGELOG="${CHANGELOG}- Removed: $file\n" ;;
              esac
            done
          fi
          
          # Save changelog for release
          echo "$CHANGELOG" > RELEASE_NOTES.md
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update version in package.json
        if: steps.check_changes.outputs.changes == 'true' || github.event.inputs.force_publish == 'true'
        run: |
          echo "📦 Updating version to ${{ steps.check_changes.outputs.next_version }}..."
          npm version ${{ steps.check_changes.outputs.next_version }} --no-git-tag-version

      - name: Commit changes
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          
          # Create commit message based on changes
          if [ "${{ steps.download_swagger.outputs.swagger_changed }}" == "true" ]; then
            git commit -m "feat: update SDK from latest API spec\n\nBREAKING CHANGE: API specification updated" || exit 0
          else
            git commit -m "chore: update generated files [skip ci]" || exit 0
          fi
          
          git push

      - name: Create and push tag
        if: steps.check_changes.outputs.changes == 'true' || github.event.inputs.force_publish == 'true'
        run: |
          git tag -a "v${{ steps.check_changes.outputs.next_version }}" -m "Release v${{ steps.check_changes.outputs.next_version }}"
          git push origin "v${{ steps.check_changes.outputs.next_version }}"

      - name: Create GitHub Release
        if: steps.check_changes.outputs.changes == 'true' || github.event.inputs.force_publish == 'true'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.check_changes.outputs.next_version }}
          release_name: Release v${{ steps.check_changes.outputs.next_version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false

      - name: Setup Node.js for NPM
        if: steps.check_changes.outputs.changes == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Publish to NPM
        if: steps.check_changes.outputs.changes == 'true' || github.event.inputs.force_publish == 'true'
        run: |
          echo "📤 Publishing to NPM..."
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Update cache
        if: steps.download_swagger.outputs.swagger_changed == 'true'
        uses: actions/cache@v4
        with:
          path: docs/v1.json
          key: swagger-${{ hashFiles('docs/v1.json') }}

      - name: Notify success
        if: steps.check_changes.outputs.changes == 'true' || github.event.inputs.force_publish == 'true'
        run: |
          echo "✅ Successfully published ecfr-sdk v${{ steps.check_changes.outputs.next_version }}"
          echo "📦 NPM: https://www.npmjs.com/package/ecfr-sdk"
          echo "🏷️ GitHub Release: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.check_changes.outputs.next_version }}"

  pr-checks:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Run linter and formatter check
        run: |
          echo "🔍 Running linter..."
          bun run check:ci

      - name: Run tests
        run: |
          echo "🧪 Running tests..."
          bun test src

      - name: Build SDK
        run: |
          echo "🔨 Building SDK..."
          bun run build

      - name: Test MCP server startup
        run: |
          echo "🚀 Testing MCP server..."
          timeout 5s bun run src/mcp/server.ts || true