name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ vars.TURBO_TEAM }}

jobs:
  check-changeset:
    name: Check Changeset
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Check for changeset
        run: bunx changeset status --since=origin/main
        continue-on-error: true
        id: changeset-status

      - name: Comment on PR
        if: steps.changeset-status.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '⚠️ This PR is missing a changeset. Please run `bun changeset` to add a changeset describing the changes.'
            })

  lint-and-type-check:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Cache Turbo
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Install dependencies
        run: bun install

      - name: Generate SDKs
        run: bunx turbo generate

      - name: Run format check
        run: bunx turbo format

      - name: Run lint check
        run: bunx turbo check:ci

      - name: Build packages
        run: bunx turbo build

  test:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install

      - name: Setup Playwright
        run: bunx playwright install --with-deps chromium

      - name: Generate SDKs
        run: bunx turbo generate

      - name: Run unit tests
        run: bunx turbo test

      - name: Run integration tests
        run: bunx turbo test:integration
        continue-on-error: true

  size-check:
    name: Bundle Size Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Generate SDKs
        run: bunx turbo generate

      - name: Build packages
        run: bunx turbo build

      - name: Check bundle sizes
        run: |
          echo "📊 Bundle sizes:"
          for pkg in packages/*; do
            if [ -d "$pkg/dist" ]; then
              echo "📦 $(basename $pkg):"
              du -sh $pkg/dist/* | sort -h
              
              # Check if bundle is too large (e.g., > 5MB per package)
              TOTAL_BYTES=$(du -sb $pkg/dist/ | cut -f1)
              if [ $TOTAL_BYTES -gt 5242880 ]; then
                echo "❌ $(basename $pkg) bundle size exceeds 5MB!"
                exit 1
              fi
            fi
          done

  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, test, size-check]
    if: always()
    steps:
      - name: Comment PR with results
        uses: actions/github-script@v7
        with:
          script: |
            const jobs = ${{ toJSON(needs) }};
            const allPassed = Object.values(jobs).every(job => job.result === 'success');
            
            const output = `## 🤖 Automated PR Check Results
            
            ${allPassed ? '✅ **All checks passed!**' : '❌ **Some checks failed**'}
            
            ### 📊 Check Summary
            - 🔍 Lint & Type Check: ${jobs['lint-and-type-check'].result === 'success' ? '✅ Passed' : '❌ Failed'}
            - 🧪 Tests: ${jobs.test.result === 'success' ? '✅ Passed' : '❌ Failed'}
            - 📦 Bundle Size: ${jobs['size-check'].result === 'success' ? '✅ Within limits' : '❌ Too large'}
            
            ### 📝 Next Steps
            ${allPassed ? 
              '- Review code changes\n- Ensure changeset is added if needed\n- Merge when ready' : 
              '- Fix failing checks\n- Push updates to this PR'
            }`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });